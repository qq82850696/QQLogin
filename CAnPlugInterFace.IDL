[id(85), helpstring("")] HRESULT TileWindow([in] BSTR Title,[in] BSTR class_name,[in] long wHow,[out,retval] long * retLong );
[id(86), helpstring("把窗口坐标转换为屏幕坐标(指定的窗口句柄,返回X坐标,返回Y坐标)[整形数]0 失败, 1 成功")] HRESULT ClientToScreen([in] long hWnd,[in,out] long * X,[in,out] long * y,[out,retval] long * retLong );
[id(87), helpstring("根据指定进程名,枚举系统中符合条件的进程PID(进程名,[方式])[字符串]进程PID")] HRESULT EnumProcess([in] BSTR ProcessName,[in] short n,[out,retval] BSTR * retstring );
[id(88), helpstring("枚举符合条件的窗口(指定的父窗口句柄,标题,类名,取值)[字符串]返回所有匹配的指定的窗口句柄字符串,格式 hwnd1,hwnd2,hwnd3")] HRESULT EnumWindow([in] long Parent,[in] BSTR Title,[in] BSTR class_name,[in] long Filte,[out,retval] BSTR * retstring );
[id(89), helpstring("根据指定进程以及其它条件,枚举系统中符合条件的窗口(进程映像名,窗口标题,窗口类名,取值)[字符串]")] HRESULT EnumWindowByProcess([in] BSTR exeName,[in] BSTR Title,[in] BSTR class_name,[in] short filter,[out,retval] BSTR * retstring );
[id(90), helpstring("根据指定进程pid以及其它条件,枚举系统中符合条件的窗口(进程PID,窗口标题,窗口类名,取值)[字符串]")] HRESULT EnumWindowByProcessId([in] long nPID,[in] BSTR Title,[in] BSTR class_name,[in] short filter,[out,retval] BSTR * retstring );
[id(91), helpstring("在指定窗口的属性表中增加一个新项，或者修改一个现有项(指定的窗口句柄,项名,数据的句柄)[整形数]0 失败,1 成功")] HRESULT SetWindowProp([in] long hWnd,[in] BSTR lpString,[in] BSTR hstring,[out,retval] long * retLong );
[id(92), helpstring("获取指定窗口属性表的项值(指定的窗口句柄,项名)[整形数]0 失败,非 0 成功")] HRESULT GetWindowProp([in] long hWnd,[in] BSTR lpString,[out,retval] BSTR * retstring );
[id(93), helpstring("清除指定窗口属性表的项值(指定的窗口句柄,项名)[整形数]0 失败, 1 成功")] HRESULT RemoveWindowProp([in] long hWnd,[in] BSTR lpString,[out,retval] long * retLong );
[id(94), helpstring("查找窗口句柄(类名,标题)[整形数]窗口句柄")] HRESULT FindWindow([in] BSTR class_name,[in] BSTR Title,[out,retval] long * retLong );
[id(95), helpstring("根据指定的进程名字,来查找可见窗口(进程名,窗口类名,窗口标题)[整形数]整形数表示的窗口句柄，没找到返回0")] HRESULT FindWindowByProcess([in] BSTR Process,[in] BSTR class_name,[in] BSTR Title,[out,retval] long * retLong );
[id(96), helpstring("根据指定的进程ID,来查找可见窗口(PID,窗口类名,窗口标题)[整形数]整形数表示的窗口句柄，没找到返回0")] HRESULT FindWindowByProcessId([in] long process_id,[in] BSTR class_name,[in] BSTR Title,[out,retval] long * retLong );
[id(97), helpstring("查找子窗口(父窗口,类名,标题)[整形数]窗口句柄")] HRESULT FindWindowEx([in] long Parent,[in] BSTR class_name,[in] BSTR Title,[out,retval] long * retLong );
[id(98), helpstring("获取浏览器的网页句柄(顶层窗口句柄,[窗口类名])[整形数]整形数表示的窗口句柄，没找到返回0")] HRESULT FindIEWindow([in] long hWnd,[in] BSTR Class,[out,retval] long * retLong );
[id(99), helpstring("获取线程句柄(窗口句柄)[整形数]线程句柄")] HRESULT GetThreadHwnd([in] long hWnd,[out,retval] long * retLong );
[id(100), helpstring("窗口句柄取线程ID(窗口句柄)[整形数]线程ID")] HRESULT GetThreadID([in] long hWnd,[out,retval] long * retLong );
[id(101), helpstring("获取自身进程PID()[整形数]进程PID")] HRESULT GetMyPID([out,retval] long * retLong );
[id(102), helpstring("获取自身句柄([窗口类名],[窗口标题])[整形数]整形数表示的窗口句柄，没找到返回0")] HRESULT GetMyHwnd([in] BSTR class_name,[in] BSTR Title,[out,retval] long * retLong );
[id(103), helpstring("获取指定窗口客户区的大小(窗口句柄,x1,y1,x2,y2)[整形数]0 失败, 1 成功")] HRESULT GetClientRect([in] long hWnd,[in,out] VARIANT * x1,[in,out] VARIANT * y1,[in,out] VARIANT * x2,[in,out] VARIANT * y2,[out,retval] long * retLong );
[id(104), helpstring("获取窗口客户区域的宽度和高度(窗口句柄,宽度,高度)[整形数]0 失败, 1 成功")] HRESULT GetClientSize([in] long hWnd,[in,out] VARIANT * W,[in,out] VARIANT * h,[out,retval] long * retLong );
[id(105), helpstring("获取当前拥有输入焦点的窗口()[整形数]整形数表示的窗口句柄，没找到返回0")] HRESULT GetForegroundFocus([out,retval] long * retLong );
[id(106), helpstring("获取顶层活动窗口()[整形数]整形数表示的窗口句柄，没找到返回0")] HRESULT GetForegroundWindow([out,retval] long * retLong );
[id(107), helpstring("获取鼠标指向的窗口句柄()[整形数]整形数表示的窗口句柄，没找到返回0")] HRESULT GetMousePointWindow([out,retval] long * retLong );
[id(108), helpstring("获取给定坐标的窗口句柄(x,y)[整形数]整形数表示的窗口句柄，没找到返回0")] HRESULT GetPointWindow([in] long X,[in] long y,[out,retval] long * retLong );
[id(109), helpstring("获取特殊窗口(取值:0.桌面窗口 1.任务栏句柄)[整形数]整形数表示的窗口句柄，没找到返回0")] HRESULT GetSpecialWindow([in] short flag,[out,retval] long * retLong );
[id(110), helpstring("获取相关窗口(窗口句柄,取值)[整形数]整形数表示的窗口句柄，没找到返回0")] HRESULT GetWindow([in] long hWnd,[in] short flag,[out,retval] long * retLong );
[id(111), helpstring("获取兄弟窗口(窗口句柄,位置)[整形数]整形数表示的窗口句柄，没找到返回0")] HRESULT GetBrotherWindow([in] long hWnd,[in] short p,[out,retval] long * retLong );
[id(112), helpstring("查找窗口类名(窗口句柄)[字符串]窗口类名")] HRESULT GetWindowClass([in] long hWnd,[out,retval] BSTR * retstring );
[id(113), helpstring("获取进程ID(窗口句柄)[整形数]进程PID")] HRESULT GetWindowProcessId([in] long hWnd,[out,retval] long * retLong );
[id(114), helpstring("得到窗口程序路径(窗口句柄)[字符串]窗口句柄所在的进程全路径")] HRESULT GetWindowProcessPath([in] long hWnd,[out,retval] BSTR * retstring );
[id(115), helpstring("获取窗口在屏幕上的位置(窗口句柄,x1,y1,x2,y2)[整形数]0 失败,1 成功")] HRESULT GetWindowRect([in] long hWnd,[in,out] VARIANT * x1,[in,out] VARIANT * y1,[in,out] VARIANT * x2,[in,out] VARIANT * y2,[out,retval] long * retLong );
[id(116), helpstring("获取窗口高度和宽度(窗口句柄,宽度,高度)[整形数]0 失败,1 成功")] HRESULT GetWindowSize([in] long hWnd,[in,out] long * nWidth,[in,out] long * nHeight,[out,retval] long * retLong );
[id(117), helpstring("获取指定窗口的一些属性(指定的窗口句柄,取值)[整形数]0: 不满足条件,1:满足条件")] HRESULT GetWindowState([in] long hWnd,[in] short flag,[out,retval] long * retLong );
[id(118), helpstring("查找窗口标题(窗口句柄,[方式])[字符串]窗口标题")] HRESULT GetWindowTitle([in] long hWnd,[in] short n,[out,retval] BSTR * retstring );
[id(119), helpstring("移动窗口(窗口句柄,x坐标,y坐标)[整形数]0 失败, 1 成功")] HRESULT MoveWindow([in] long hWnd,[in] VARIANT X,[in] VARIANT y,[out,retval] long * retLong );
[id(120), helpstring("把屏幕坐标转换为窗口坐标(窗口句柄,返回X坐标,返回Y坐标)[整形数]0 失败, 1 成功")] HRESULT ScreenToClient([in] long hWnd,[in,out] long * X,[in,out] long * y,[out,retval] long * retLong );
[id(121), helpstring("向指定窗口发送文本数据(指定的窗口句柄,发送的文本数据,[发送方式])[整形数]0失败,1成功")] HRESULT SendString([in] long hWnd,[in] BSTR SetStr,[in] short IsClear,[out,retval] long * retLong );
[id(122), helpstring("向指定窗口发送文本数据(指定的窗口句柄,发送的文本数据,[发送方式])[整形数]0失败,1成功")] HRESULT SendString2([in] long hWnd,[in] BSTR SetStr,[in] short IsClear,[out,retval] long * retLong );
[id(123), helpstring("设置窗口客户区域的宽度和高度(指定的窗口句柄,宽度,高度)[整形数]0失败,1成功")] HRESULT SetClientSize([in] long hWnd,[in] VARIANT X,[in] VARIANT y,[out,retval] long * retLong );
[id(124), helpstring("设置窗口的状态(指定的窗口句柄,取值)")] HRESULT SetWindowState([in] long hWnd,[in] short flag,[out,retval] long * retLong );
[id(125), helpstring("设置窗口的标题文字(窗口句柄,标题)[0失败,1成功]")] HRESULT SetWindowText([in] long hWnd,[in] BSTR Title,[out,retval] long * retLong );
[id(126), helpstring("设置窗口的大小(窗口句柄,宽度,高度)[整形数]0 失败,1 成功")] HRESULT SetWindowSize([in] VARIANT Hwnds,[in] VARIANT W,[in] VARIANT h,[out,retval] long * retLong );
[id(127), helpstring("设置窗口透明度(窗口句柄,透明度:整形数:0-255)[整形数]0 失败,1 成功")] HRESULT SetWindowTransparent([in] long hWnd,[in] short trans,[out,retval] long * retLong );
[id(128), helpstring("设置窗口鼠标穿透(窗口句柄)[整形数]0 失败,1 成功")] HRESULT SetMouseThrough([in] long hWnd,[out,retval] long * retLong );
[id(129), helpstring("取消窗口设置(窗口句柄,模式：0 一般窗体~1 UpdateLayeredWindow画窗体)[整形数]0 失败,1 成功")] HRESULT ClearSetWindow([in] long hWnd,[in] short flag,[out,retval] long * retLong );
[id(130), helpstring("禁止窗口关闭按钮(指定的窗口句柄,[允许或禁止],[是否MDI窗口])[整形数]0 失败, 1 成功")] HRESULT EnableClose([in] long hWnd,[in] VARIANT_BOOL IsClose,[in] VARIANT_BOOL MDIChild,[out,retval] long * retLong );
[id(131), helpstring("进程名获取进程全路径(进程名)[字符串]进程路径")] HRESULT GetProcessPath([in] BSTR ProcessName,[out,retval] BSTR * retstring );
[id(132), helpstring("PID获取进程全路径(PID)[字符串]进程路径")] HRESULT GetProcessPathByPID([in] long PID,[out,retval] BSTR * retstring );
[id(133), helpstring("获取进程数量(进程名)[整形数]进程数量")] HRESULT GetProcessNum([in] BSTR ProcessName,[out,retval] long * retLong );
[id(134), helpstring("结束进程(映像名称)")] HRESULT EndByProcessOf([in] BSTR ProcessName,[out,retval] long * retLong );
[id(135), helpstring("结束自身的进程()[整形数] 0 失败,1 成功")] HRESULT EndMyProcess([out,retval] long * retLong );
[id(136), helpstring("判断进程是否存在(进程名)[整形数]0 不存在,1 存在")] HRESULT IsProcessExist([in] BSTR ProcessName,[out,retval] long * retLong );
[id(137), helpstring("获取指定进程的创建时间(进程PID或进程名)[字符串]进程的创建时间")] HRESULT GetProcessCreateTime([in] long PID,[out,retval] BSTR * retstring );
[id(138), helpstring("通过PID取进程名(PID)[字符串]")] HRESULT GetProcessNameByPID([in] long PID,[out,retval] BSTR * retstring );
[id(139), helpstring("通过进程名取父进程PID(进程名)[整形数]PID")] HRESULT GetParentPIDByName([in] BSTR szProcessName,[out,retval] long * retLong );
[id(140), helpstring("通过PID取父进程PID(PID)[整形数]PID")] HRESULT GetParentPIDByPID([in] long nProcessID,[out,retval] long * retLong );
[id(141), helpstring("设置枚举窗口的超时时间,默认10s(延时 单位:毫秒)")] HRESULT SetEnumWindowDelay([in] long dy );
[id(142), helpstring("检测当前进程的父进程是否是EXPLORE的父进程()[整形数] 0 否,1 是")] HRESULT IsExplorer([out,retval] long * retLong );
[id(143), helpstring("检测运行环境是否在调试器内()[整形数] 0 否,1 是")] HRESULT IsDebug([out,retval] long * retLong );
[id(144), helpstring("检测csrss调试器有没有在运行()[整形数] 0 否,1 是")] HRESULT IsCsrss([out,retval] long * retLong );
[id(145), helpstring("返回当前插件版本号()[字符串]")] HRESULT Ver([out,retval] BSTR * retstring );
[id(146), helpstring("设置全局路径(路径)[整形数]0 失败, 1 成功")] HRESULT SetPath([in] BSTR dPath,[out,retval] long * retLong );
[id(147), helpstring("获取注册在系统中的Aniu.dll的路径()[字符串]返回Aniu.dll所在路径")] HRESULT GetBasePath([out,retval] BSTR * retstring );
[id(148), helpstring("返回当前进程已经创建的Aniu对象个数()[整形数]")] HRESULT GetAnCount([out,retval] long * retLong );
[id(149), helpstring("获取全局路径()[字符串]")] HRESULT GetPath([out,retval] BSTR * retstring );
[id(150), helpstring("获取插件命令的最后错误()[整形数]")] HRESULT GetLastError([out,retval] long * retLong );
[id(151), helpstring("获取插件命令的的错误信息([错误代码])[整形数]")] HRESULT GetLastText([in] long dwErrCode,[out,retval] BSTR * retstring );
[id(152), helpstring("设置是否弹出错误信息(显示)[整形数] 0 失败,1 成功")] HRESULT SetShowErrorMsg([in] long EM,[out,retval] long * retLong );
[id(153), helpstring("设置函数的使用方式(方式)")] HRESULT SetFuncIndex([in] BSTR strMode,[out,retval] long * retLong );
[id(154), helpstring("绑定窗口(指定的窗口句柄,[屏幕颜色获取方式],[鼠标模式],[键盘模式])[整形数] 0 失败,1 成功")] HRESULT BindWindow([in] long Hwnds,[in] VARIANT dis,[in] VARIANT MouseMode,[in] VARIANT KeyMode,[out,retval] long * retLong );
[id(155), helpstring("解除窗口绑定()[整形数] 0 失败,1 成功")] HRESULT UnBindWindow([out,retval] long * retLong );
[id(156), helpstring("释放当前进程物理内存到虚拟内存{慎用}([指定的窗口句柄])[整形数] 0 失败 1 成功")] HRESULT FreeMemory([in] long hWnd,[out,retval] long * retLong );
[id(157), helpstring("注册卸载DLL和OCX(DLL路径,[注册=True.卸载=False])[布尔值]成功 True,失败 False")] HRESULT RegServer([in] BSTR sDllPath,[in,out] VARIANT_BOOL * bRegister,[out,retval] VARIANT_BOOL * _arg3 );
[id(158), helpstring("禁止程序重复运行(标识文本)[布尔值] false 标识已存在,true 创建标识成功")] HRESULT DisableMultiOpen([in] BSTR lpName,[out,retval] VARIANT_BOOL * _arg2 );
[id(159), helpstring("禁止程序重复运行(标识文本)[整形数]0 失败,>0 成功")] HRESULT AppNoRepeatRun([in] BSTR strIDText,[out,retval] long * retLong );
[id(160), helpstring("设置文本框只读(窗口句柄)[整形数]0 失败,1 成功")] HRESULT SetTextBox([in] long THwnd,[out,retval] long * retLong );
[id(161), helpstring("通过桌面快捷方式获取程序路径(快捷方式名称)[字符串]成功返回exe路径,失败返回空")] HRESULT GetDeskToplnkPath([in] BSTR lnkName,[out,retval] BSTR * retstring );
[id(162), helpstring("")] HRESULT CheckPoint2([in,out] SAFEARRAY * * PointsX,[in,out] SAFEARRAY * * PointsY,[in] VARIANT DestX,[in] VARIANT DestY,[out,retval] VARIANT_BOOL * _arg5 );
[id(163), helpstring("")] HRESULT CheckPoint([in] double DestX,[in] double DestY,[out,retval] VARIANT_BOOL * _arg3 );
[id(164), helpstring("根据指定的PID，强制结束进程([PID])[整形数]0 失败,1 成功")] HRESULT TerminateProcess([in] long PID,[out,retval] long * retLong );
[id(165), helpstring("根据指定pid打开进程，并返回进程句柄([PID])[整形数]进程句柄,失败返回 0")] HRESULT OpenProcess([in] long PID,[out,retval] long * retLong );
[id(166), helpstring("获取内存信息(取值:0-12)[变体型]返回整形数或字符串")] HRESULT GetMemoryInfo([in] long flag,[out,retval] VARIANT * _arg2 );
[id(167), helpstring("异常处理程序,收集崩溃信息()[整形数]")] HRESULT ExceptionHandle([out,retval] long * retLong );
[id(168), helpstring("获取指定窗口所在进程的启动命令行(窗口句柄)[字符串]")] HRESULT GetCommandLine([in] long hWnd,[out,retval] BSTR * retstring );
[id(169), helpstring("读取快捷方式指向的路径(快捷方式)[字符串] 文件路径")] HRESULT ReadShortcutPath([in] BSTR lnkFile,[out,retval] BSTR * retstring );
[id(170), helpstring("创建快捷方式(快捷方式,指定路径)")] HRESULT CreateShortCut([in] BSTR position,[in] BSTR SourePath );
[id(171), helpstring("修改靠谱.BS分辨率([宽度],[高度])")] HRESULT ModiResolution([in] long an_Width,[in] long an_Height );
[id(172), helpstring("创建互斥体对象(互斥体名称)[整形数]互斥体句柄")] HRESULT CreateMutex([in] BSTR sMutex,[out,retval] long * retLong );
[id(173), helpstring("打开互斥体对象(互斥体名称)[整形数]互斥体句柄")] HRESULT OpenMutex([in] BSTR sMutex,[out,retval] long * retLong );
[id(174), helpstring("锁定互斥体对象(互斥体句柄,锁定时间.单位毫秒)[整形数]0 核心对象已被激活;258 等待超时;-1 出现错误，可通过GetLastError得到错误代码")] HRESULT WaitForObject([in] long hHandle,[in] long dwMilliseconds,[out,retval] long * retLong );
[id(175), helpstring("解锁互斥体对象(互斥体句柄)[整形数]0 失败, 1 成功")] HRESULT DeleteMutex([in] long hHandle,[out,retval] long * retLong );
[id(176), helpstring("关闭一个内核对象,其中包括文件、文件映射、进程、线程、安全和同步对象等(句柄)[整形数]")] HRESULT ClosedObject([in] long hHandle,[out,retval] long * retLong );
[id(177), helpstring("创建一个进入线程许可证，用作进入程序中的指定许可代码区，以避免多线程冲突()[整形数] 0 失败 非0 成功")] HRESULT CreatePermit([out,retval] long * retLong );
[id(178), helpstring("根据已经创建的许可证进入指定许可代码区，在此线程未退出之前，其它线程如要通过同一个进入许可证进入该许可代码区则必须先等待此线程退出许可代码区，从而保证了指定许可代码区在任何时候都只能有一条线程进入并执行()[整形数]")] HRESULT LockPermit([out,retval] long * retLong );
[id(179), helpstring("指示当前线程将退出许可代码区，并允许其它使用同一进入许可证的线程进入此许可代码区()[整形数]")] HRESULT UnlockPermit([out,retval] long * retLong );
[id(180), helpstring("删除由“CreatePermit”命令所创建的进入许可证()[整形数]0 失败 1 成功")] HRESULT DeletePermit([out,retval] long * retLong );
[id(181), helpstring("创建或打开一个命名的或无名的事件对象([对象名称])[整形数]成功返回事件对象句柄,失败返回 0")] HRESULT CreateAffair([in] BSTR lpName,[out,retval] long * retLong );
[id(182), helpstring("打开一个已经存在的命名事件对象([对象句柄])[整形数]成功返回事件对象句柄,失败返回 0")] HRESULT OpenAffair([in] BSTR lpName,[out,retval] long * retLong );
[id(183), helpstring("设置事件的状态为有信号(事件句柄)[整数数]0,失败 1,成功")] HRESULT SetAffair([in] long hEvent,[out,retval] long * retLong );
[id(184), helpstring("设置事件的状态为有信号(事件句柄)[整数数]0,失败 1,成功")] HRESULT PulseAffair([in] long hEvent,[out,retval] long * retLong );
[id(185), helpstring("把指定的事件对象设置为无信号状态(事件句柄)[整数数]0,失败 1,成功")] HRESULT ResetAffair([in] long hEvent,[out,retval] long * retLong );
[id(186), helpstring("获取当前输入法()[字符串]")] HRESULT GetInput([out,retval] BSTR * retstring );
[id(187), helpstring("获取所有输入法()[字符串]")] HRESULT GetAllInput([out,retval] BSTR * retstring );
[id(188), helpstring("创建新的信号量(信号名,[空闲使用数量])[整形数]信号量对象的句柄")] HRESULT CreateSemap([in] BSTR lpName,[in] long lMaximumCount,[out,retval] long * retLong );
[id(189), helpstring("打开信号量(信号量句柄)[整形数]信号量对象的句柄")] HRESULT OpenSemap([in] BSTR lpName,[out,retval] long * retLong );
[id(190), helpstring("对指定的信号量增加指定的值(信号量句柄,[需要增加的值])[整形数]信号量对象的句柄")] HRESULT ReleaseSemap([in] long hSemaphore,[in] long lReleaseCount,[out,retval] long * retLong );
[id(191), helpstring("指针到字符串(字符串地址,字符串长度,[模式])[字符串]")] HRESULT Point2Str([in] long Pointer,[in] long nLength,[in] short n,[out,retval] BSTR * retstring );
[id(192), helpstring("指针到长整数(指针地址,指针长度)[整形数]")] HRESULT Point2Long([in] long Pointer,[in] long Length,[out,retval] long * retLong );
[id(193), helpstring("创建共享内存([共享对象的名字])[整形数]对象句柄")] HRESULT CreateShareMem([in] BSTR lpName,[out,retval] long * retLong );
[id(194), helpstring("写入共享内存(对象句柄,[写入内容])[整形数]")] HRESULT WriteShareMem([in] long lpString,[in] BSTR lpString2 );
[id(195), helpstring("读取共享内存([对象句柄])[字符串]成功返回字符串,失败返回空")] HRESULT ReadShareMem([in] long lpString2,[out,retval] BSTR * retstring );
[id(196), helpstring("关闭共享内存()[整形数]0,失败 1,成功")] HRESULT ClosedShareMem([out,retval] long * retLong );
[id(197), helpstring("判断指定点(x,y)是否在区域内(一系列点,X坐标,Y坐标)[整型数]0,不在范围内 1,在范围内")] HRESULT IsInRect([in] BSTR strCoor,[in] long X,[in] long y,[out,retval] long * retLong );
[id(198), helpstring("广度优先遍历(起点,终点,二维地图数组)[字符串]成功返回路线,失败返回空")] HRESULT Topology([in] BSTR Starting,[in] BSTR Endting,[in,out] VARIANT * MapArr,[out,retval] BSTR * retstring );
[id(199), helpstring("程序重启([重启延时])")] HRESULT ProgramRestart([in] long seconds );
[id(200), helpstring("创建文件(文件名,[布尔值]创建方式)[长整型]创建成功的文件句柄")] HRESULT CreateFile([in] BSTR FilePath,[in] VARIANT_BOOL CreateIfNotExists,[out,retval] long * retLong );
[id(201), helpstring("打开一个文件(文件名,[打开方式])[长整型]文件句柄,失败返回 -1")] HRESULT OpenFile([in] BSTR FilePath,[in] long FileType,[out,retval] long * retLong );
[id(202), helpstring("关闭文件(文件句柄)[整形数] 0失败,1成功")] HRESULT CloseFile([in] long FileHandl,[out,retval] long * retLong );
[id(203), helpstring("移动文件(目标文件,存放路径)[整形数] 0失败,1成功")] HRESULT MoveFile([in] VARIANT Source,[in] VARIANT Destination,[out,retval] long * retLong );
[id(204), helpstring("复制文件(目标文件,存放路径)[整形数] 0失败,1成功")] HRESULT CopyFile([in] BSTR Source,[in] BSTR Destination,[out,retval] long * retLong );
[id(205), helpstring("删除文件(目标文件)[整形数] 0失败,1成功")] HRESULT DeleteFile([in,out] SAFEARRAY * * FilePath,[out,retval] long * retLong );
[id(206), helpstring("判断文件是否存在(目标源文件)[整形数] 存在为1 不存在为0")] HRESULT IsFileExist([in] BSTR FilePath,[out,retval] long * retLong );
[id(207), helpstring("判断文件夹是否存在(目标源文件)[整形数] 存在为1 不存在为0")] HRESULT IsFolderExist([in] BSTR FilePath,[out,retval] long * retLong );
[id(208), helpstring("检测文件或者目录(目标路径,[方式])[整形数] 根据'方式'不同返回值不同")] HRESULT IsPathExist([in] BSTR lpPathName,[in] VARIANT TestType,[out,retval] long * retLong );
[id(209), helpstring("替换指定文件内容(欲查找的内容,替换的内容,文本路径)[整形数]0 失败,1 成功")] HRESULT ReplaceTxt([in] BSTR find,[in] BSTR Replac,[in,out] BSTR * FilePath,[out,retval] long * retLong );
[id(210), helpstring("替换指定行(指定行,欲替换的内容,文件路径)[整形数]0 失败 ,1 成功")] HRESULT ReplaceLine([in] VARIANT Line,[in] BSTR Replace,[in] BSTR FilePath,[out,retval] long * retLong );
[id(211), helpstring("小精灵重启(程序路径)[整形数]0 失败,1 成功")] HRESULT RestartMe([in] BSTR FilePath,[out,retval] long * retLong );
[id(212), helpstring("删除指定行(指定行,文件路径)[整形数]0 失败 ,1 成功")] HRESULT DeleteLine([in] VARIANT Line,[in] BSTR FilePath,[out,retval] long * retLong );
[id(213), helpstring("读取指定行(指定行,文件路径)[字符串]")] HRESULT ReadSLine([in] VARIANT Line,[in] BSTR FilePath,[out,retval] BSTR * retstring );
[id(214), helpstring("删除重复行(源文件,[新文件],[方式])[整形数]0 失败 ,1 成功")] HRESULT RemoveRepLine([in] BSTR OldFile,[in] BSTR NewFile,[in] VARIANT_BOOL n,[out,retval] long * retLong );
[id(215), helpstring("读文本(目标文件路径,返回格式: 0 数组 1 字符串 以 | 隔开 2 字符串 以Chr（0）隔开)")] HRESULT ReadFile([in] BSTR FilePath,[in] long n,[out,retval] VARIANT * _arg3 );
[id(216), helpstring("读指定编码文本(目标文件路径,[文件编码格式])[字符串]")] HRESULT ReadFileEx([in] BSTR Filename,[in] VARIANT fmt,[out,retval] BSTR * retstring );
[id(217), helpstring("Vista路径转Win32路径(Vista路径)[字符串]")] HRESULT Vista2Win32Path([in] BSTR DrivePath,[out,retval] BSTR * retstring );
[id(218), helpstring("写文本内容(目标源文件,写入的内容,[方式])[整形数] 0 失败 ,1 成功")] HRESULT WriteFile([in] BSTR FilePath,[in] VARIANT Text,[in] long n,[out,retval] long * retLong );
[id(219), helpstring("写到文件(目标源文件,写入的内容,[是否添加方式],[文件编码格式])[整形数] 0 失败 ,1 成功")] HRESULT WriteFileEx([in] BSTR Filename,[in,out] BSTR * sText,[in] VARIANT_BOOL IsAppend,[in,out] long * fmt,[out,retval] long * retLong );
[id(220), helpstring("二进制写到文件(目标源文件,写入的内容,[写入位置])[整形数] 0 失败 ,1 成功")] HRESULT WriteFileByBin([in] VARIANT FilePath,[in] VARIANT Text,[in] long fSeek,[out,retval] long * retLong );
[id(221), helpstring("二进制读取文件(目标源文件,读取位置)[整形数] 0 失败 ,1 成功")] HRESULT ReadFileByBin([in] VARIANT FilePath,[in] VARIANT fSeek,[out,retval] BSTR * retstring );
[id(222), helpstring("打开文件并定位(文件名)[文件存在返回 True,否则返回 False]")] HRESULT OpenFileLocate([in] BSTR FilePath,[out,retval] long * retLong );
[id(223), helpstring("定期删除文件(路径,扩展名,时间类型,时间间隔)")] HRESULT DelFilesTiming([in] BSTR FilePath,[in] BSTR suffix,[in] BSTR interval,[in] short Num,[out,retval] long * retLong );
[id(224), helpstring("批量修改文件名(文件夹路径,旧文件名,新文件名)[整形数]0 失败,1 成功")] HRESULT ChangeFileName([in] BSTR FilePath,[in] BSTR OldFile,[in] BSTR NewFile,[out,retval] long * retLong );
[id(225), helpstring("建立文件夹(创建的文件夹路径)[整形数]0 失败 ,1 成功")] HRESULT CreateFolder([in] BSTR FilePath,[out,retval] long * retLong );
[id(226), helpstring("复制文件夹(目标文件夹路径,存放文件夹路径)[整形数] 0 失败 1 成功")] HRESULT CopyFolder([in] BSTR Source,[in] BSTR Destination,[out,retval] long * retLong );
[id(227), helpstring("移动文件夹(目标文件夹路径,存放文件夹路径)[整形数] 0 失败 1 成功")] HRESULT MoveFolder([in] BSTR Source,[in] BSTR Destination,[out,retval] long * retLong );
[id(228), helpstring("删除文件夹(文件夹路径)[整形数]0 失败 ,1 成功")] HRESULT DeleteFolder([in] BSTR FilePath,[out,retval] long * retLong );
[id(229), helpstring("全面获取文件夹属性(文件路径,取值,[操作对象])[字符串]")] HRESULT GetFileMsg([in] VARIANT FilePath,[in] short n,[in] VARIANT_BOOL Directory,[out,retval] BSTR * retstring );
[id(230), helpstring("获取指定文件的时间信息(文件路径,[类型 0:创建时间.1:修改时间.2:写入时间])[字符串]")] HRESULT GetFileTime([in] BSTR FilePath,[in] short n,[out,retval] BSTR * retstring );
[id(231), helpstring("获取文件属性(文件路径)[整形数]")] HRESULT GetFileState([in] BSTR FilePath,[out,retval] long * retLong );
[id(232), helpstring("获取文件属性中详细信息里的各项目(文件路径)[字符串]")] HRESULT GetFileInfo([in] BSTR Filename,[out,retval] BSTR * retstring );
[id(233), helpstring("获取指定文件的短路径名(文件名)[字符串]短文件名")] HRESULT GetShortFileName([in] BSTR strFileName,[out,retval] BSTR * retstring );
[id(234), helpstring("获取指定文件的长路径名(文件名)[字符串]长文件名")] HRESULT GetLongFileName([in] BSTR strFileName,[out,retval] BSTR * retstring );
[id(235), helpstring("获取指定路径的最后成分(指定文件的路径)[字符串]")] HRESULT GetFileName([in] BSTR FilePath,[out,retval] BSTR * retstring );
[id(236), helpstring("获取包含路径中最后成分扩展名的字符串(指定文件的路径)[字符串]")] HRESULT GetExtension([in] BSTR FilePath,[out,retval] BSTR * retstring );
[id(237), helpstring("获取指定路径的父路径(指定文件的路径)[字符串]")] HRESULT GetFilePath([in] BSTR FilePath,[out,retval] BSTR * retstring );
[id(238), helpstring("获取文件的行数(文件路径)[整形数]")] HRESULT GetFileLine([in] BSTR FilePath,[out,retval] long * retLong );
[id(239), helpstring("设置文件的创建、访问及上次修改时间(文件路径,[创建时间],[上一次访问的时间],[最近一次修改的时间])[整形数] 0 失败 ,1 成功")] HRESULT SetFileTime([in] BSTR FilePath,[in] DATE lpCreationTime,[in] DATE lpLastAccessTime,[in] DATE lpLastWriteTime,[out,retval] long * retLong );
[id(240), helpstring("设置文件属性(文件路径,取值)[整形数] 0 失败 ,1 成功")] HRESULT SetFileState([in] BSTR FilePath,[in] VARIANT n,[out,retval] long * retLong );
[id(241), helpstring("枚举指定目录下的所有文件([文件名:支持通配符],[文件夹路径])[字符串]")] HRESULT EnumFile([in] BSTR Filename,[in] BSTR FilePath,[out,retval] BSTR * retstring );
[id(242), helpstring("枚举指定目录下的所有文件夹(文件夹路径,过滤文件名)[字符串]")] HRESULT EnumFloder([in] BSTR FilePath,[in] VARIANT FlodeName,[out,retval] BSTR * retstring );
[id(243), helpstring("Bat遍历目录下指定文件扩展名(文件扩展名,目录名,写入的txt文件名)[字符串]")] HRESULT EnumExtension_bat([in] BSTR Extension,[in] BSTR FilePath,[in] BSTR ByPath,[out,retval] BSTR * retstring );
[id(244), helpstring("根据通配符获取文件集合(文件名])[字符串]")] HRESULT MatchFileName([in] BSTR pic_name,[out,retval] BSTR * retstring );
[id(245), helpstring("遍历磁盘查找程序路径(程序名,[第n个盘开始],[方式])[字符串]")] HRESULT FindExePath([in] BSTR FilePath,[in] short Disk,[in] short n,[out,retval] BSTR * retstring );
[id(246), helpstring("文件比较(源文件1,源文件2,输出文件)[整形数] 0 无重复, 1 有重复")] HRESULT FileComp([in] BSTR inFile1,[in] BSTR inFile2,[in] BSTR OutFile,[out,retval] long * retLong );
[id(247), helpstring("文件去除重复行(源文件,输出文件)")] HRESULT FileToRepeat([in] BSTR InFile,[in] BSTR OutFile );
[id(248), helpstring("文件或文件夹操作(源文件,[目标文件],[操作方式 0 移动.1 复制.2 重命名.3 删除])[整形数]0 失败,1 成功")] HRESULT FileOperation([in] VARIANT Source,[in] BSTR Destination,[in] long n,[out,retval] long * retLong );
[id(249), helpstring("文件重定向(布尔值: True 禁止重定向; False 恢复重定向)[整形数]0 失败,1 成功")] HRESULT FileRedirect([in] VARIANT_BOOL Wow64FsEnableRedirection,[out,retval] long * retLong );
[id(250), helpstring("弹出选择文件夹对话框([标题])[字符串]文件路径")] HRESULT SelectDirectory([in] BSTR Title,[out,retval] BSTR * retstring );
[id(251), helpstring("弹出选择文件对话框([过滤器的索引],[0 选择 1 保存],[初始目录])[字符串]文件路径")] HRESULT SelectFileEx([in] short Index,[in] short n,[in] BSTR szInitalDir,[out,retval] BSTR * retstring );
[id(252), helpstring("写配置文件(小节名,键名,键值,文件路径)[整形数] 0 失败 ,1 成功")] HRESULT WriteInI([in] BSTR SectionName,[in] VARIANT KeyWord,[in] VARIANT ValInt,[in] BSTR Filename,[out,retval] long * retLong );
[id(253), helpstring("向指定的Ini写入信息.支持加密文件(小节名,键名,键值,ini文件路径,密码)[整形数]0 失败,1 成功")] HRESULT WriteInIPwd([in] BSTR SectionName,[in] VARIANT KeyWord,[in] VARIANT ValInt,[in] BSTR Filename,[in] BSTR pwd,[out,retval] long * retLong );
[id(254), helpstring("读配置文件(小节名,键名,文件路径)[字符串]")] HRESULT ReadInI([in] BSTR SectionName,[in] VARIANT KeyWord,[in] BSTR Filename,[out,retval] BSTR * retstring );
[id(255), helpstring("从Ini中读取指定信息.可支持加密文件(小节名,键名,ini文件路径,密码)[字符串]")] HRESULT ReadInIPwd([in] BSTR SectionName,[in] VARIANT KeyWord,[in] BSTR Filename,[in] BSTR pwd,[out,retval] BSTR * retstring );
[id(256), helpstring("遍历小节名(配置文件路径)[字符串]")] HRESULT EnumIniSection([in] BSTR FilePath,[out,retval] BSTR * retstring );
[id(257), helpstring("遍历指定小节名下的键名(小节名,ini路径)[字符串]键名")] HRESULT EnumIniKey([in] BSTR JieName,[in] BSTR FilePath,[out,retval] BSTR * retstring );
[id(258), helpstring("删除指定的ini小节(小节名,文件路径)[整形数] 0 失败 ,1 成功")] HRESULT DeleteIni([in] BSTR SectionName,[in] BSTR FilePath,[out,retval] long * retLong );
[id(259), helpstring("删除配置项(小节名,键名,文件路径)[整形数] 0 失败 ,1 成功")] HRESULT DelIniItem([in] BSTR SectionName,[in] BSTR KeyName,[in] BSTR FilePath,[out,retval] long * retLong );
[id(260), helpstring("删除自身()")] HRESULT KillMe([in] short n );
[id(261), helpstring("设置EnumFile EnumFloder的匹配模式(0:模糊 1:精确)")] HRESULT SetMatchPattren([in] long n );
[id(262), helpstring("正则删除文本中的空行(要操作的文本)[字符串]成功返回删除空行后的文本,失败返回空")] HRESULT Reg_DelBlankLine([in] BSTR szText,[out,retval] BSTR * retstring );
[id(263), helpstring("正则遍历ini小节名(ini文件路径)[字符串]")] HRESULT Reg_EnumIniSection([in] BSTR SetStr,[out,retval] BSTR * retstring );
[id(264), helpstring("正则遍历ini键名(小节名,ini文件路径)[字符串]")] HRESULT Reg_EnumIniKey([in] BSTR SetStr,[in] BSTR IniPath,[out,retval] BSTR * retstring );
[id(265), helpstring("正则删除指定的ini小节(小节名,键名,ini文件路径)[整形数]0 失败, 1 成功")] HRESULT Reg_DeleteIni([in] BSTR Section,[in] BSTR Key,[in] BSTR IniPath,[out,retval] long * retLong );
[id(266), helpstring("正则删除文本中的空行(文件路径)[整形数]0 失败, 1 成功")] HRESULT Reg_DeleteBlankLine([in] BSTR FilePath,[out,retval] long * retLong );
[id(267), helpstring("正则取汉字(文本)[字符串]")] HRESULT Reg_GetWord([in] BSTR SetStr,[out,retval] BSTR * retstring );
[id(268), helpstring("正则取字母(文本)[字符串]")] HRESULT Reg_GetLetter([in] BSTR SetStr,[out,retval] BSTR * retstring );
[id(269), helpstring("正则取数字(文本)[字符串]")] HRESULT Reg_GetNum([in] BSTR SetStr,[out,retval] BSTR * retstring );
[id(270), helpstring("正则搜索(正则文本,欲搜索的文本,[子匹配索引],[区分大小写],[多行匹配],[全局匹配])[字符串]以Vbcrlf隔开")] HRESULT Reg_Search([in] VARIANT RegPattern,[in] VARIANT SeraCh,[in] VARIANT SubCount,[in] VARIANT_BOOL IsCase,[in] VARIANT_BOOL IsMultiline,[in] VARIANT_BOOL IsGlobal,[out,retval] BSTR * retstring );
[id(271), helpstring("正则表达式创建(正则文本,欲搜索的文本,[区分大小写],[多行匹配],[全局匹配])[整形数]0失败,1成功")] HRESULT Reg_Craete([in] VARIANT Source,[in] VARIANT Destination,[in] VARIANT_BOOL IsCase,[in] VARIANT_BOOL IsMultiline,[in] VARIANT_BOOL IsGlobal,[out,retval] VARIANT_BOOL * _arg6 );
[id(272), helpstring("正则表达式卸载()[整形数]0失败,1成功")] HRESULT Reg_Terminate([out,retval] long * retLong );
[id(273), helpstring("正则表达式取匹配数量()[整形数]")] HRESULT Reg_GetMatchCount([out,retval] long * retLong );
[id(274), helpstring("正则表达式取子匹配数量()[整形数]")] HRESULT Reg_GetSubMatchCount([out,retval] long * retLong );
[id(275), helpstring("正则表达式取匹配文本(匹配索引)[字符串]")] HRESULT Reg_GetMatchText([in] short Index,[out,retval] BSTR * retstring );
[id(276), helpstring("正则表达式取子匹配文本(匹配索引,子匹配索引)[整形数]")] HRESULT Reg_GetSubMatchText([in] short Index,[in] short SubIndex,[out,retval] BSTR * retstring );
[id(277), helpstring("正则表达式替换(表达式,欲替换的文本)[整形数]0失败,1成功")] HRESULT Reg_Replace([in] BSTR find,[in] BSTR Expression,[out,retval] BSTR * retstring );
[id(278), helpstring("正则表达式替换(正则表达式,欲搜索的字符串,[欲替换的值])[字符串]")] HRESULT Reg_ReplaceEx([in] VARIANT sPattern,[in] VARIANT sSearch,[in] BSTR Expression,[out,retval] BSTR * retstring );
[id(279), helpstring("正则设置对象序号(序号)")] HRESULT Reg_SetRegSN([in] short n );
[id(280), helpstring("设置开机启动([应用程序路径])[整形数]0 失败,1 成功")] HRESULT HKEY_SetStartup([in] BSTR progarmPath,[out,retval] long * retLong );
[id(281), helpstring("创建注册表项双(主键,项名称)[长整型]0,失败 1,创建成功 2,打开现有的项")] HRESULT HKEY_CreateKey([in] BSTR sRootkey,[in] BSTR sKeyName,[out,retval] long * retLong );
[id(282), helpstring("删除注册表项(主键,项名称,[欲删除的项],[是否包括子项])[整形数]0 失败,1 成功")] HRESULT HKEY_DeleteSubKey([in] BSTR sRootkey,[in] BSTR sKeyName,[in] BSTR sDelKeyName,[in] VARIANT_BOOL Delete,[out,retval] long * retLong );
[id(283), helpstring("删除注册表项的值(主键,项名称,值名称)[整形数]0 失败,1 成功")] HRESULT HKEY_DeleteValue([in] BSTR sRootkey,[in] BSTR sKeyName,[in] BSTR SValueName,[out,retval] long * retLong );
[id(284), helpstring("注册表定位(主键,[项名称])[整形数]0失败,1成功")] HRESULT HKEY_LocateRegistry([in] BSTR RegKey,[in] BSTR ValueStr,[out,retval] long * retLong );
[id(285), helpstring("枚举注册表项下的包含指定内容的子项(主键,项名称,欲搜索的内容.多个内容以'|'隔开)[字符串]一维数组")] HRESULT HKEY_EnumKey([in] BSTR sRootkey,[in] BSTR sSubKey,[in] VARIANT conditions,[out,retval] SAFEARRAY * * _arg4 );
[id(286), helpstring("查找注册表项下的包含指定键名的子项(主键,项名称,欲搜索的内容.多个内容以'|'隔开)[字符串]一维数组")] HRESULT HKEY_FindKey([in] BSTR sRootkey,[in] BSTR sSubKey,[in] VARIANT conditions,[out,retval] SAFEARRAY * * _arg4 );
[id(287), helpstring("查找注册表项下的包含指定键值的子项(主键,项名称,欲搜索的内容.多个内容以'|'隔开)[字符串]一维数组")] HRESULT HKEY_FindValue([in] BSTR sRootkey,[in] BSTR sSubKey,[in] VARIANT conditions,[out,retval] SAFEARRAY * * _arg4 );
[id(288), helpstring("枚举注册表项下的所有子项(主键,项名称,返回子项数组)[长整型]子项数量")] HRESULT HKEY_EnumSubKeys([in] BSTR sRootkey,[in] BSTR sKeyName,[in,out] SAFEARRAY * * sSubKey,[out,retval] long * retLong );
[id(289), helpstring("枚举注册表项下的所有子项(主键,项名称,返回子项数组)[整形数]子项数量")] HRESULT HKEY_EnumSubKeyEx([in] BSTR sRootkey,[in] BSTR sKeyName,[in,out] SAFEARRAY * * subKeys,[out,retval] long * retLong );
[id(290), helpstring("枚举注册表子项的值(主键,项名称,用于返回的值名称数组)[整形数]项数量")] HRESULT HKEY_EnumValue([in] BSTR sRootkey,[in] BSTR sKeyName,[in,out] SAFEARRAY * * subKeys,[in] BSTR findKey,[out,retval] long * retLong );
[id(291), helpstring("枚举注册表子项的值(主键,项名称,用于返回的值名称数组,用于返回的值数据数组,[欲枚举的值类型])[长整型]项数量")] HRESULT HKEY_EnumValues([in] BSTR sRootkey,[in] BSTR sKeyName,[in,out] SAFEARRAY * * SValueName,[in,out] SAFEARRAY * * SValueValue,[in] VARIANT OnlyType,[out,retval] long * retLong );
[id(292), helpstring("注册表项查找程序路径(程序名称,[主键],[项名称])[字符串]")] HRESULT HKEY_GetExePath([in] BSTR exeName,[in] BSTR sRootkey,[in] BSTR sKeyName,[out,retval] BSTR * retstring );
[id(293), helpstring("注册表项值查找程序路径(程序名称,[主键],[项名称])[字符串]")] HRESULT HKEY_GetExePath2([in] BSTR exeName,[in] BSTR sRootkey,[in] BSTR sKeyName,[out,retval] BSTR * retstring );
[id(294), helpstring("获取注册表项字符串值(主键,项名称,值名称,[值类型],[布尔值 是否单一])[字符串]")] HRESULT HKEY_GetString([in] BSTR sRootkey,[in] VARIANT sKeyName,[in] BSTR SValueName,[in] long sz_Type,[in] VARIANT_BOOL blnForceSingleString,[out,retval] BSTR * retstring );
[id(295), helpstring("获取注册表项二进制值(主键,项名称,值名称,[布尔值 是否取长整型数据],[布尔值 是否取二进制数据])[整形数]0 失败,1 成功")] HRESULT HKEY_GetBinary([in] BSTR sRootkey,[in] VARIANT sKeyName,[in] BSTR SValueName,[in] VARIANT_BOOL blnGetAsLong,[in] VARIANT_BOOL blnGetAsString,[out,retval] VARIANT * _arg6 );
[id(296), helpstring("获取注册表项默认值(主键,项名称,[值类型])[字符串]")] HRESULT HKEY_GetDefault([in] BSTR sRootkey,[in] VARIANT sKeyName,[in] VARIANT lValueType,[out,retval] BSTR * retstring );
[id(297), helpstring("获取注册表项双字节值(主键,项名称,值名称)[长整型]十进制数据")] HRESULT HKEY_GetDword([in] BSTR sRootkey,[in] BSTR sKeyName,[in] BSTR SValueName,[out,retval] long * retLong );
[id(298), helpstring("向注册表项写入二进制值(主键,项名称,值名称,二进制数据)[整形数]0 失败,1 成功")] HRESULT HKEY_SetBinary([in] BSTR sRootkey,[in] BSTR sKeyName,[in] BSTR SValueName,[in] VARIANT lValueValue,[out,retval] long * retLong );
[id(299), helpstring("向注册表项写入双字节值(主键,项名称,值名称,十进制数据)[整形数]0 失败,1 成功")] HRESULT HKEY_SetDword([in] BSTR sRootkey,[in] BSTR sKeyName,[in] BSTR SValueName,[in] long lValueValue,[out,retval] long * retLong );
[id(300), helpstring("向注册表项写入字符串(主键,项名称,值名称,值数据,[值类型])[整形数]0 失败,1 成功")] HRESULT HKEY_SetString([in] BSTR sRootkey,[in] BSTR sKeyName,[in] BSTR SValueName,[in] VARIANT SValueValue,[in] long lValueType,[out,retval] long * retLong );
[id(301), helpstring("判断注册表项是否存在(主键,项名称)[整形数]0 不存在,1 存在")] HRESULT HKEY_IsKeyExists([in] BSTR sRootkey,[in,out] BSTR * sKeyName,[out,retval] long * retLong );
[id(302), helpstring("判断注册表项下是否存在子项(主键,项名称)[整形数]0 不存在,1 存在")] HRESULT HKEY_IsSubKeyExists([in] BSTR sRootkey,[in,out] BSTR * sKeyName,[out,retval] long * retLong );
[id(303), helpstring("判断注册表项的值是否存在(主键,项名称,值名称)[整形数]0 不存在,1 存在")] HRESULT HKEY_IsValueExists([in] BSTR sRootkey,[in] BSTR sKeyName,[in] BSTR SValueName,[out,retval] long * retLong );
[id(304), helpstring("导出注册表项(主键,项名称,保存的文件路径,[布尔值 是否包括版本号],[布尔值 是否包括子项],[输出状态文本框的内容])[整形数] 0 失败,1 成功")] HRESULT HKEY_ExportFormReg([in] BSTR sRootkey,[in,out] BSTR * sKeyName,[in] VARIANT sRegFile,[in] VARIANT_BOOL RegVersion4,[in] VARIANT_BOOL IncludeSubkeys,[out,retval] long * retLong );
[id(305), helpstring("导入注册表文件(.Reg 注册表文件路径)[整形数] 0 失败,1 成功")] HRESULT HKEY_ImportToReg([in] VARIANT sRegFile,[out,retval] long * retLong );
[id(306), helpstring("注册表主键的值转字符串值(主键)[字符串]")] HRESULT HKEY_RootKeyToStr([in] long lRootkey,[out,retval] BSTR * retstring );
[id(307), helpstring("注册表主键字符串转整数值(主键)[整形数]")] HRESULT HKEY_StrToRootKey([in] BSTR sRootkey,[out,retval] long * retLong );
[id(308), helpstring("注册表主键路径转主键值和项名称(主键全路径,用于返回的项名称)[整形数]主键值")] HRESULT HKEY_StrToRootKeyAbb([in] BSTR StrPath,[in,out] VARIANT * sKeyName,[out,retval] long * retLong );
[id(309), helpstring("注册表字符串解密(注册表字符串)[字符串]明文")] HRESULT HKEY_StrDecryption([in] BSTR strCiphertext,[out,retval] BSTR * retstring );
[id(310), helpstring("VBS读取注册表(注册表项)[字符串]注册表项")] HRESULT ReadHKEY([in] VARIANT HKEYValue,[out,retval] VARIANT * _arg2 );
[id(311), helpstring("VBS写入注册表(注册表项,新项名,[数据类型])")] HRESULT WriteHKEY([in] VARIANT MainHKEY,[in] VARIANT HKEYValue,[in] VARIANT HKEYName = vtMissing );
[id(312), helpstring("VBS删除注册表(注册表项)")] HRESULT DelHKEY([in] VARIANT ItemDeleted );
[id(313), helpstring("文本批量替换(原文本,起始位置,进行的次数,是否匹分大小写,可变参数:欲被替换的文本n.用作替换的文本n+1)[字符串]替换后文本")] HRESULT Text_Replace([in] BSTR szText,[in] long nStart,[in] long nCount,[in] long nCompare,[in,out] SAFEARRAY * * sonText,[out,retval] BSTR * retstring );
[id(314), helpstring("从文本的左边按欲寻找的文本开始寻找(被查找的文本,欲寻找的文本,寻找起始位置,是否区分大小写.默认不区分)[字符串]成功返回取到的文本,失败返回空")] HRESULT Text_GetLeft([in] BSTR szText,[in] BSTR findText,[in] long nStart,[in] long nCompare,[out,retval] BSTR * retstring );
[id(315), helpstring("从文本的右边按欲寻找的文本开始寻找(被查找的文本,欲寻找的文本,寻找起始位置,是否区分大小写.默认不区分)[字符串]成功返回取到的文本,失败返回空")] HRESULT Text_GetLeftRev([in] BSTR szText,[in] BSTR findText,[in] long nStart,[in] long nCompare,[out,retval] BSTR * retstring );
[id(316), helpstring("从文本的右边按欲寻找的文本开始寻找(被查找的文本,欲寻找的文本,寻找起始位置,是否区分大小写.默认不区分)[字符串]成功返回取到的文本,失败返回空")] HRESULT Text_GetRight([in] BSTR szText,[in] BSTR findText,[in] long nStart,[in] long nCompare,[out,retval] BSTR * retstring );
[id(317), helpstring("从文本的左边按欲寻找的文本开始寻找(被查找的文本,欲寻找的文本,寻找起始位置,是否区分大小写.默认不区分)[字符串]成功返回取到的文本,失败返回空")] HRESULT Text_GetRightRev([in] BSTR szText,[in] BSTR findText,[in] long nStart,[in] long nCompare,[out,retval] BSTR * retstring );
[id(318), helpstring("按键码转按键名(键码)[字符串]按键名")] HRESULT AscToChr([in] long X,[out,retval] BSTR * retstring );
[id(319), helpstring("字符串繁体转简体(字符串)[字符串]")] HRESULT BIG5ToGB([in] BSTR SetStr,[out,retval] BSTR * retstring );
[id(320), helpstring("字符串简体转繁体(字符串)[字符串]")] HRESULT GBToBIG5([in] BSTR SetStr,[out,retval] BSTR * retstring );
[id(321), helpstring("按键码转按键名字(键名)[字符串]按键名")] HRESULT ChrToAsc([in] BSTR X,[out,retval] long * retLong );
[id(322), helpstring("中文数字转西文数字(欲转换的字符串)[整形数]转换后的数字")] HRESULT ChinaToNum([in] BSTR Chinese,[out,retval] double * _arg2 );
[id(323), helpstring("阿拉伯数字转中文数字(欲转换的数字,是否返回人民币大写,是否带十百千等单位,小数点个数)[字符串]转换后的数字")] HRESULT NumberToChinese([in] VARIANT otherNum,[in] VARIANT_BOOL isRMB,[in] VARIANT_BOOL numOption,[in] short dotNum,[out,retval] BSTR * retstring );
[id(324), helpstring("取文本中的数字(文本)[字符串]")] HRESULT GetStrNum([in] VARIANT Text,[out,retval] BSTR * retstring );
[id(325), helpstring("取中间字符串(源文本,左边的字符,右边的字符,[方式])[字符串]")] HRESULT GetMidStr([in] VARIANT Text,[in] VARIANT LeftStr,[in] VARIANT RightStr,[in] long nType,[out,retval] BSTR * retstring );
[id(326), helpstring("批量取中间字符串(字符串,左边的字符,右边的字符)[字符串]")] HRESULT GetMidStrEx([in] VARIANT Text,[in] VARIANT LeftStr,[in] VARIANT RightStr,[out,retval] BSTR * retstring );
[id(327), helpstring("查找一个字符串在另一个字符串中出现的次数(接受搜索的字符串,要搜索的字符串)[整形数]")] HRESULT GetNumOfStr([in] VARIANT str1,[in] VARIANT str2,[out,retval] long * retLong );
[id(328), helpstring("获取全球唯一标识符()[字符串]")] HRESULT GetUUID([out,retval] BSTR * retstring );
[id(329), helpstring("在大型文件里查找字符串(文件路径,欲查找的字符串)[整形数]返回字节位置")] HRESULT InStrBEx([in] BSTR FilePath,[in] BSTR strText,[out,retval] long * retLong );
[id(330), helpstring("InStr或运算(欲查找的字符串,大于或者等于,判断的字符串.可变参数1..n)[整形数]0 没有找到,1 找到")] HRESULT InStrOr([in] BSTR string1,[in] VARIANT_BOOL compare,[in] BSTR Strs,[out,retval] long * retLong );
[id(331), helpstring("InStr与运算(欲查找的字符串,大于或者等于,判断的字符串.可变参数1..n)[整形数]0 没有找到,1 找到")] HRESULT InStrAnd([in] BSTR string1,[in] VARIANT_BOOL compare,[in] BSTR Strs,[out,retval] long * retLong );
[id(332), helpstring("按键码转字符串,同ChrToAsc(键名)[字符串]按键]")] HRESULT KeyCodeToStr([in] long Key,[out,retval] BSTR * retstring );
[id(333), helpstring("西文数字转中文数字(欲转换的数字)[字符串]转换后的字符")] HRESULT NumToChina([in] long Num,[out,retval] BSTR * retstring );
[id(334), helpstring("批量替换文本(原字符串,搜索字符串,替换字符串)[字符串]")] HRESULT ReplaceEx([in] VARIANT Sion,[in] VARIANT findstr,[in] VARIANT rewith,[out,retval] BSTR * retstring );
[id(335), helpstring("字符串批量替换(源文本,用来替换的子字符串,[可变参数]要搜索的字符串1....n)[字符串]替换后的文本")] HRESULT ReplaceBatCh([in] VARIANT Expression,[in] VARIANT Replacewith,[in,out] SAFEARRAY * * rwith,[out,retval] VARIANT * _arg4 );
[id(336), helpstring("随机帐号(字母个数,数字个数,是否重复．布尔值　默认:不重复 False)[字符串]")] HRESULT RndAccount([in] long zimu,[in] long Num,[in] VARIANT_BOOL wei,[out,retval] BSTR * retstring );
[id(337), helpstring("利用GUID生气随机帐号(账号个数)[字符串]")] HRESULT RndAccount2([in] long zimu,[out,retval] BSTR * retstring );
[id(338), helpstring("不重复的随机数(最大数,最小数,位数)[字符串]")] HRESULT RndNotRep([in] long MAX,[in] long Min,[in] long wei,[out,retval] BSTR * retstring );
[id(339), helpstring("随机生成汉字(个数)[字符串]")] HRESULT RndWord([in] long Num,[out,retval] BSTR * retstring );
[id(340), helpstring("随机字母(位数)[字符串]")] HRESULT RndStr([in] long wei,[out,retval] BSTR * retstring );
[id(341), helpstring("随机数字(位数)[字符串]")] HRESULT RndNum([in] long wei,[out,retval] BSTR * retstring );
[id(342), helpstring("随机姓名()[字符串]")] HRESULT RndName([out,retval] BSTR * retstring );
[id(343), helpstring("打乱字符串顺序(字符串)")] HRESULT ShuffleDeck([in] VARIANT Text,[out,retval] BSTR * retstring );
[id(344), helpstring("字符串去重复(字符串)")] HRESULT StringToRepeat([in] VARIANT Text,[out,retval] BSTR * retstring );
[id(345), helpstring("汉字转拼音(中文汉字)[字符串]")] HRESULT WordtoPinyin([in] VARIANT Word,[out,retval] BSTR * retstring );
[id(346), helpstring("获取全球唯一标识符GUID()[字符串]")] HRESULT CreateGuid([out,retval] BSTR * retstring );
[id(347), helpstring("冒泡排序(数组,[排序方式.默认:1])")] HRESULT Arr_BubbleSort([in,out] VARIANT * SetArr,[in] short fs,[out,retval] SAFEARRAY * * _arg3 );
[id(348), helpstring("选择排序(数组,[排序方式.默认:1])")] HRESULT Arr_SelectSort([in,out] VARIANT * SetArr,[in] short fs,[out,retval] VARIANT * _arg3 );
[id(349), helpstring("插入排序(数组,[排序方式.默认:1])")] HRESULT Arr_InsertSort([in,out] VARIANT * SetArr,[in] short fs,[out,retval] VARIANT * _arg3 );
[id(350), helpstring("交换排序(数组,[排序方式.默认:1])")] HRESULT Arr_ChangeSort([in,out] VARIANT * SetArr,[in] short fs,[out,retval] VARIANT * _arg3 );
[id(351), helpstring("快速排序算法(数组,[最小下标],[最大下标])")] HRESULT Arr_QuickSort([in,out] VARIANT * SetArr,[in] double l,[in] double r,[out,retval] SAFEARRAY * * _arg4 );
[id(352), helpstring("桶排序(数组,[排序方式.默认:1])")] HRESULT Arr_Bucket([in,out] VARIANT * SetArr,[in] short fs,[out,retval] VARIANT * _arg3 );
[id(353), helpstring("希尔排序算法(数组,[排序方式.默认:1])")] HRESULT Arr_ShellSort([in,out] VARIANT * SetArr,[in] short fs,[out,retval] VARIANT * _arg3 );
[id(354), helpstring("堆排序算法(数组)")] HRESULT Arr_Heap([in,out] VARIANT * SetArr,[out,retval] VARIANT * _arg2 );
[id(355), helpstring("数组去重复(数组,方式)[数组]")] HRESULT Arr_ToRepeat([in,out] VARIANT * SetArr,[in] short fs,[out,retval] VARIANT * _arg3 );
[id(356), helpstring("计算两个坐标间的距离(X1坐标,Y1坐标,X2坐标,Y2坐标)")] HRESULT Calculation([in] VARIANT x1,[in] VARIANT y1,[in] VARIANT x2,[in] VARIANT y2,[out,retval] long * retLong );
[id(357), helpstring("10进制转16进制(欲转换的数字)[字符串]")] HRESULT DecToHex([in] CURRENCY Dec,[out,retval] BSTR * retstring );
[id(358), helpstring("十六进制转十进制(字符串)")] HRESULT HexToDec([in] BSTR Dec,[in] short ms,[out,retval] double * _arg3 );
[id(359), helpstring("坐标排序(坐标数组,X坐标,Y坐标)[数组]")] HRESULT CoorSort([in,out] VARIANT * SetArr,[in] long X,[in] long y,[out,retval] VARIANT * _arg4 );
[id(360), helpstring("带序号的坐标去重复(坐标串,[误差x],[误差y])[字符串]")] HRESULT dmToRepeat([in] BSTR dm,[in] short px,[in] short py,[out,retval] BSTR * retstring );
[id(361), helpstring("不带序号坐标去重复(坐标串,[误差x],[误差y])[字符串]")] HRESULT dmToRepeatNoIndex([in] BSTR dm,[in] short px,[in] short py,[out,retval] BSTR * retstring );
[id(362), helpstring("不带坐标的序号去重复(坐标串)[字符串]")] HRESULT dmToRepeatNoCoor([in] BSTR dm,[out,retval] BSTR * retstring );
[id(363), helpstring("带序号的坐标排序(坐标串)[字符串]")] HRESULT dmCoorSort([in] BSTR dm,[out,retval] BSTR * retstring );
[id(364), helpstring("")] HRESULT Repeatdm([in] VARIANT dmStr,[in] VARIANT X,[in] VARIANT y,[in] long lIndex,[out,retval] BSTR * retstring );
[id(365), helpstring("")] HRESULT RepeatInRect([in] VARIANT dmStr,[in] VARIANT X,[in] VARIANT y,[in] long lIndex,[out,retval] BSTR * retstring );
[id(366), helpstring("")] HRESULT SetRect([in] VARIANT strRect );
[id(367), helpstring("随机延时(最小值,最大值)[整形数]随机数")] HRESULT Random([in] long Min,[in] long MAX,[out,retval] long * retLong );
[id(368), helpstring("获取随机坐标(左上角X,左上角Y,右下角X,右下角Y)[二维数组]")] HRESULT RandCoordinates([in] VARIANT x1,[in] VARIANT y1,[in] VARIANT x2,[in] VARIANT y2,[out,retval] VARIANT * _arg5 );
[id(369), helpstring("取平均数(数组)")] HRESULT Mean([in,out] VARIANT * SetArr,[out,retval] double * _arg2 );
[id(370), helpstring("求小数(除数,被除数,小数部分保留位数)")] HRESULT ODecimal([in] VARIANT divisor,[in] VARIANT Dividend,[in] long Figures,[out,retval] double * _arg4 );
[id(371), helpstring("替代按键自代的延迟(延时间隔.单位:毫秒)")] HRESULT Delay([in] double Dt );
[id(372), helpstring("延时指定范围内随机毫秒,过程中不阻塞UI操作. 一般高级语言使用.按键用不到(最小毫秒数,最大毫秒数)[整形数]返回延时的毫秒数")] HRESULT Delays([in] double mis_min,[in] double mis_max,[out,retval] double * _arg3 );
[id(373), helpstring("超级随机延时(最小毫秒数,最大毫秒数,[延时单位 0.毫秒 1.微秒 2.秒 3.分 4.小时 5.天])[整形数]0 失败,1 成功")] HRESULT DelayExs([in] double mis_min,[in] double mis_max,[in] long dCompany,[out,retval] long * retLong );
[id(374), helpstring("超级延时(延时间隔,[延时单位 0.毫秒 1.微秒 2.秒 3.分 4.小时 5.天])[整形数]0 失败,1 成功")] HRESULT DelayEx([in] double Dt,[in] long dCompany,[out,retval] long * retLong );
[id(375), helpstring("时间限制(单位:毫秒,天数)")] HRESULT DelaySEx([in] double Dt,[in] short tian,[out,retval] long * retLong );
[id(376), helpstring("从网络获取当前北京时间()[字符串:时间格式]")] HRESULT GetNetTime([out,retval] DATE * _arg1 );
[id(377), helpstring("两个日期相加(日期1,[日期2])[时间日期型]")] HRESULT DateAddEx([in] DATE Date1,[in] DATE Date2,[out,retval] DATE * _arg3 );
[id(378), helpstring("与网络时间同步()[网络时间]")] HRESULT TimeSynchronous([out,retval] DATE * _arg1 );
[id(379), helpstring("时间限制([起始时间],[结束时间])[整形数]0 时间到,1 时间未到")] HRESULT Timelimit([in] DATE StartTime,[in] DATE EndTime,[out,retval] long * retLong );
[id(380), helpstring("时间限制2(结束时间,[文件路径],[获取数量])[整形数]0 时间到,1 时间未到")] HRESULT TimelimitEx([in] DATE SetTime,[in] BSTR SetFile,[in] short SetNum,[out,retval] long * retLong );
[id(381), helpstring("时间_取现行时间戳([是否取十位时间])[字符串]")] HRESULT GetNowStamp([in] VARIANT_BOOL IsTen,[out,retval] BSTR * retstring );
[id(382), helpstring("时间_取随机时间戳()[字符串]")] HRESULT GetRndStamp([out,retval] BSTR * retstring );
[id(383), helpstring("生成随机日期(最小日期,最大日期)[时间日期型]")] HRESULT GetRndDate([in] VARIANT MinDate,[in] VARIANT MaxDate,[out,retval] DATE * _arg3 );
[id(384), helpstring("弹出现窗口显示内容(提示内容,[显示样式],[提示标题],[等待时间],[方式])[整形数]")] HRESULT MsgBoxEx([in] VARIANT Prompt,[in] long Buttons,[in] BSTR Title,[in] long Wait,[in] long n,[out,retval] enum VbMsgBoxResult * _arg6 );
[id(385), helpstring("时间_时间戳转文本(欲转换的时间戳)[字符串]转换后的文本")] HRESULT TimeStampToStr([in] BSTR Stamp,[out,retval] BSTR * retstring );
[id(386), helpstring("北京时间转格林尼治时间(欲转换的时间)[字符串]")] HRESULT TimeToGMT([in] VARIANT Times,[out,retval] BSTR * retstring );
[id(387), helpstring("北京时间转格林尼治时间(欲转换的时间)[字符串]")] HRESULT TimeToGMT1([in] BSTR Times,[out,retval] BSTR * retstring );
[id(388), helpstring("北京时间转格林尼治时间(欲转换的时间)[字符串]")] HRESULT TimeToGMT2([in] BSTR Times,[out,retval] BSTR * retstring );
[id(389), helpstring("两个时间差转字符串(时间1,时间2)[字符串]")] HRESULT TimeDiffToStr([in] VARIANT T1,[in] VARIANT T2,[out,retval] BSTR * retstring );
[id(390), helpstring("格林尼治时间转北京时间(欲转换的时间)[时间日期型]")] HRESULT GMTtoTime([in] BSTR GMT,[out,retval] DATE * _arg2 );
[id(391), helpstring("格林尼治时间转北京时间(欲转换的时间)[时间日期型]")] HRESULT GMTtoTime1([in] BSTR GMT,[out,retval] DATE * _arg2 );
[id(392), helpstring("获取自windows启动以来经历的时间长度()[整形数]毫秒数")] HRESULT GetTime([out,retval] long * retLong );
[id(393), helpstring("设置当前系统时间(欲设置的时间)[整形数] 0 失败 1 成功")] HRESULT SetSystemTime([in] DATE Times,[out,retval] long * retLong );
[id(394), helpstring("获取当前系统时间([返回的毫秒])[时间日期]")] HRESULT GetSystemTime([in,out] long * Milliseconds,[out,retval] DATE * _arg2 );
[id(395), helpstring("获取当前系统时间([返回的毫秒],[使用格式])[时间日期型]")] HRESULT GetSystemTimeEx([in,out] long * Milliseconds,[in] short n,[out,retval] DATE * _arg3 );
[id(396), helpstring("注册插件(Registration)[整形数]0 失败,1 成功")] HRESULT RegAniu([in] BSTR Reg,[out,retval] long * retLong );
[id(397), helpstring("设置限制时间,单位:天(天数)")] HRESULT SetNumber([in] long number );
[id(398), helpstring("获取设置的限制天数()[整形数]")] HRESULT GetNumber([out,retval] long * retLong );
[id(399), helpstring("绑定电脑(Registration)[整形数]0 失败,1 成功")] HRESULT BusinessDecry([in] BSTR regCode,[out,retval] long * retLong );
[id(400), helpstring("")] HRESULT MachineCodeEncry([in] DATE DueTime,[in] BSTR rCode,[out,retval] BSTR * retstring );
[id(401), helpstring("加密指定的文件(文件路径,密码,加密方式)[整形数]0 失败,1 成功")] HRESULT EncodeFile([in] BSTR FilePath,[in] BSTR Key,[in] short ED,[out,retval] long * retLong );
[id(402), helpstring("解密指定的文件(文件路径,密码,解密方式)[整形数]0 失败,1 成功")] HRESULT DecodeFile([in] BSTR FilePath,[in] BSTR Key,[in] short ED,[out,retval] long * retLong );
[id(403), helpstring("加密字符串(字符串,密码,加密方式)[字符串]")] HRESULT EncodeString([in] BSTR strSource,[in] BSTR Key,[in] short ED,[out,retval] BSTR * retstring );
[id(404), helpstring("解密字符串(加密过的字符串,密码,解密方式)[字符串]")] HRESULT DecodeString([in] BSTR Source,[in] BSTR Key,[in] short ED,[out,retval] BSTR * retstring );
[id(405), helpstring("将CRC写入文件(文件路径,模式)[CRC校验码]")] HRESULT GetCRC32([in] BSTR Lujing,[in] short ms,[out,retval] BSTR * retstring );
[id(406), helpstring("获取哈希值(欲加密的字符串,加密方式)[哈希值]")] HRESULT GetHash([in] BSTR Source,[in] short Way,[out,retval] BSTR * retstring );
[id(407), helpstring("替代按键RunApp运行程序(可执行应用程序路径,[显示方式])[整形数]0 失败,1 成功")] HRESULT RunApp([in] BSTR Application,[in] long n,[in] long lType,[out,retval] long * retLong );
[id(408), helpstring("启动带命令行的应用程序(可执行应用程序路径,[显示方式],[是否等待])[整形数]0 失败,1 进程PID")] HRESULT RunApp2([in] BSTR commandLine,[in] long ShowModel,[in] VARIANT_BOOL WaitForIt,[out,retval] long * retLong );
[id(409), helpstring("获取屏幕的色深()[整形数]")] HRESULT GetScreenDepth([out,retval] long * retLong );
[id(410), helpstring("获取屏幕的高度()[整形数]")] HRESULT GetScreenHeight([out,retval] long * retLong );
[id(411), helpstring("获取屏幕的宽度()[整形数]")] HRESULT GetScreenWidth([out,retval] long * retLong );
[id(412), helpstring("得到操作系统的类型()[整形数]")] HRESULT GetOsType([out,retval] float * _arg1 );
[id(413), helpstring("得到操作系统的类型()[字符串]")] HRESULT GetOsType2([out,retval] BSTR * retstring );
[id(414), helpstring("判断当前系统是否是64位操作系统()[整形数]0 否,1 是")] HRESULT Is64Bit([out,retval] short * _arg1 );
[id(415), helpstring("判断当前系统是否是多少位操作系统()[字符串]")] HRESULT Is64Bit2([out,retval] BSTR * retstring );
[id(416), helpstring("检测当前系统是否有开启屏幕字体平滑()[整形数]0 没开,1 已开")] HRESULT CheckFontSmooth([out,retval] long * retLong );
[id(417), helpstring("关闭当前系统屏幕字体平滑.同时关闭系统的ClearType功能()[整形数]0 失败,1 成功")] HRESULT DisableFontSmooth([out,retval] long * retLong );
[id(418), helpstring("检测当前系统是否有开启UAC()[整形数]0 没开,1 已开")] HRESULT CheckUAC([out,retval] long * retLong );
[id(419), helpstring("设置当前系统的UAC(取值如下:0 关闭. 1 开启)[整形数]0 没开,1 已开")] HRESULT SetUAC([in] long enable,[out,retval] long * retLong );
[id(420), helpstring("设置剪贴板的内容(欲设置的内容)[整形数]0 失败,1 成功")] HRESULT SetClipboard([in] VARIANT Text,[out,retval] long * retLong );
[id(421), helpstring("获取剪贴板的内容()[字符串]")] HRESULT GetClipboard([out,retval] VARIANT * _arg1 );
[id(422), helpstring("获取硬盘类型(盘符)[字符串]")] HRESULT GetDriveType([in] BSTR Drive,[out,retval] BSTR * retstring );
[id(423), helpstring("获取硬盘容量(盘符,0:总容量.1:剩余容量.2:已用容量,获取类型)[字符串]容量")] HRESULT GetDiskSpace([in] BSTR DrivePath,[in] VARIANT n,[in] VARIANT M,[out,retval] BSTR * retstring );
[id(424), helpstring("获取硬盘信息(取值)")] HRESULT GetDriveInfo([in] VARIANT n,[out,retval] BSTR * retstring );
[id(425), helpstring("获取所有磁盘盘符()[字符串]盘符,以'|'隔开")] HRESULT GetAllDiskName([out,retval] BSTR * retstring );
[id(426), helpstring("获取局域网计算机的MAC地址(局域网IP)[字符串]Mac地址")] HRESULT GetLANMac([in] BSTR sRemoteIP,[out,retval] BSTR * retstring );
[id(427), helpstring("获取机器码([取值])[字符串]")] HRESULT GetMachineCode([in] long n,[out,retval] BSTR * retstring );
[id(428), helpstring("获取系统目录(类型)[字符串]返回路径")] HRESULT GetDir([in] long types,[out,retval] BSTR * retstring );
[id(429), helpstring("退出系统([0 注销 1关机 2 重启 3 快整关机],[是否强制 默认 False])[整形数]0 失败,1 成功")] HRESULT ExitOs([in] short z,[in] VARIANT_BOOL sd,[out,retval] long * retLong );
[id(430), helpstring("播放音乐(路径,取值 0 播放 1 暂停 2 停止 3 关闭)[整形数]0 失败, 1 成功")] HRESULT Play([in] BSTR Musci,[in] short Mods,[out,retval] long * retLong );
[id(431), helpstring("获取本机计算机名()[字符串]计算机名")] HRESULT GetRegEdit([out,retval] BSTR * retstring );
[id(432), helpstring("获取当前用户名()[字符串]用户名")] HRESULT GetUserName([out,retval] BSTR * retstring );
[id(433), helpstring("修改计算机名(名字)")] HRESULT ModCompName([in] BSTR Name );
[id(434), helpstring("获取博客网络验证限制的时间()[字符串]失败返回空")] HRESULT GetMicroTime([out,retval] BSTR * retstring );
[id(435), helpstring("获取博客网络验证限制的地址()[字符串]失败返回空")] HRESULT GetMicroRegion([out,retval] BSTR * retstring );
[id(436), helpstring("获取博客网络验证绑定的机器码()[字符串]失败返回空")] HRESULT GetMicroMachine([out,retval] BSTR * retstring );
[id(437), helpstring("")] HRESULT SetValidateHtml([in] BSTR strHtml );
[id(438), helpstring("")] HRESULT Reg([in] BSTR regCode,[out,retval] long * retLong );
[id(439), helpstring("博客网络验证(博客地址,[访问方式],[提交数据])[布尔值]True 正常使用,False 禁止使用")] HRESULT BlogValidation([in] BSTR Url,[in] VARIANT_BOOL types,[in] BSTR PostData,[out,retval] VARIANT_BOOL * _arg4 );
[id(440), helpstring("博客网络验证_增强(博客地址)[布尔值]True 正常使用,False 禁止使用")] HRESULT BlogValidationEx([in,out] SAFEARRAY * * UrlArr,[out,retval] VARIANT_BOOL * _arg2 );
[id(441), helpstring("删除IE的Cookie([COOKie文件名],[Cookie路径])[整形数] 0 失败 1 成功")] HRESULT ClearCookie([in] BSTR TheKeyWord,[in] BSTR CookiePath,[out,retval] long * retLong );
[id(442), helpstring("删除IE临时文件([文件路径])[整形数] 0 失败 1 成功")] HRESULT ClearTemp([in] BSTR TempPath,[out,retval] long * retLong );
[id(443), helpstring("删除IE历史记录()[整形数] 0 失败 1 成功")] HRESULT ClearHistory([out,retval] long * retLong );
[id(444), helpstring("从网络上下载文件(下载地址,保存路径)[整形数] 0 失败 1 成功")] HRESULT DownLoadFile([in] BSTR Url,[in] BSTR SavePath,[out,retval] long * retLong );
[id(445), helpstring("获取网页源文件(网址,编码方式: GB2312 或者 UTF-8)[字符串]成功返回网页源码,失败返回空")] HRESULT GetHtml([in] BSTR Url,[in] BSTR Code,[out,retval] BSTR * retstring );
[id(446), helpstring("获取重定向后的网址(网址)[字符串]成功返回网址,失败返回空")] HRESULT GetRedirectUrl([in] BSTR SetUrl,[out,retval] BSTR * retstring );
[id(447), helpstring("获取博客验证得到的网页源码()[字符串]成功返回网页源代码,失败返回空")] HRESULT GetWebHtml([out,retval] BSTR * retstring );
[id(448), helpstring("获取网页访问后的Cookie()[字符串]成功返回网页Cookie,失败返回空")] HRESULT GetCookie([out,retval] BSTR * retstring );
[id(449), helpstring("发送邮件(用户名,密码,接收邮箱地址,信件标题,信件内容,[附件地址],[方式])[整形数]")] HRESULT SendEmail([in] BSTR User,[in] BSTR Pass,[in] BSTR SendAddres,[in] VARIANT MailCaption,[in] VARIANT MailText,[in] BSTR SFilename,[in] VARIANT n,[out,retval] long * retLong );
[id(450), helpstring("设置博客验证读取网页的编码(网页编码)[整形数]0 失败, 1 成功")] HRESULT SetWebCode([in] BSTR Code,[out,retval] long * retLong );
[id(451), helpstring("设置博客验证发送的邮箱(用户名,密码,接收邮箱地址,信件标题,信件内容,[附件地址])[整形数]0 失败, 1 成功")] HRESULT SetEMail([in,out] SAFEARRAY * * Mail,[out,retval] long * retLong );
[id(452), helpstring("保存图片(保存路径,[图片二进制数据])[整形数]0 失败,1 成功")] HRESULT SaveBitMap([in] BSTR ImgPath,[in] VARIANT ImgData,[out,retval] long * retLong );
[id(453), helpstring("按指定类型转换(字符串,[定转换的类型])")] HRESULT Strconversion([in] VARIANT Expsion,[in] short conversion,[out,retval] VARIANT * _arg3 );
[id(454), helpstring("运行脚本(脚本,脚本类型)[字符串]失败返回空,成功返回执行结果")] HRESULT RunScript([in] BSTR ScriptCode,[in] VARIANT_BOOL ScriptType,[out,retval] BSTR * retstring );
[id(455), helpstring("运行脚本函数(函数源码,函数名,脚本类型VBS或JS,参数个数0-12,参数列表)[字符串]失败返回空,成功返回执行结果")] HRESULT RunScriptEx([in] BSTR ScriptCode,[in] BSTR FunName,[in] VARIANT_BOOL ScriptType,[in] short nParam,[in,out] SAFEARRAY * * Param,[out,retval] BSTR * retstring );
[id(456), helpstring("编码转换,Utf-8转Ansi(待转换的文本)")] HRESULT Utf8ToAnsi([in] BSTR Unicode,[out,retval] BSTR * retstring );
[id(457), helpstring("编码转换,Utf-8转GB2312(待转换的文本)")] HRESULT Utf8ToGB2312([in] BSTR Unicode,[out,retval] BSTR * retstring );
[id(458), helpstring("编码转换,GB2312转Utf-8(待转换的文本)")] HRESULT GB2312ToUtf8([in] BSTR Unicode,[out,retval] BSTR * retstring );
[id(459), helpstring("编码转换,Usc2转Ansi(待转换的文本)")] HRESULT Usc2ToAnsi([in] BSTR Unicode,[out,retval] BSTR * retstring );
[id(460), helpstring("网页_置Cookie(网址,[Cookie名称],[Cookie内容],[有效期])[整形数]0 失败,1 成功")] HRESULT Url_SetCookie([in] BSTR Url,[in] BSTR CookieN,[in] BSTR Cookies,[in] DATE validity,[out,retval] long * retLong );
[id(461), helpstring("网页_取Cookie(域名,[Cookie名称])[字符串]")] HRESULT Url_GetCookie([in] BSTR ServerName,[in] BSTR CookieN,[out,retval] BSTR * retstring );
[id(462), helpstring("网页_清除Cookie(域名)[整形数]0 失败,1 成功")] HRESULT Url_DeleteCookie([in] BSTR ServerName,[out,retval] long * retLong );
[id(463), helpstring("Url编码(待编码的文本,编码方式)[字符串]")] HRESULT URLEncode([in] BSTR Url,[in] short Way,[out,retval] BSTR * retstring );
[id(464), helpstring("Url解码(待解码的文本,解码方式)[字符串]")] HRESULT URLDecode([in] BSTR Url,[in] short Way,[out,retval] BSTR * retstring );
[id(465), helpstring("网页_访问_对象(网址,[访问方式],[提交信息],[提交Cookie],[返回Cookie],[附加协议头],[返回协议头],[返回状态代码],[禁止重定向],[代理地址],[超时],[用户名],[密码],[代理标识],[对象继承])[字符串]网页源码")] HRESULT ObjWebAccess([in] BSTR Url,[in] VARIANT_BOOL AccessType,[in] BSTR SubmitMsg,[in] BSTR SubCookie,[in,out] BSTR * ReCookie,[in] BSTR Addhead,[in,out] BSTR * ReHead,[in,out] long * Restatus,[in] VARIANT_BOOL IsRedirect,[in] BSTR AgentUrl,[in] long timeOut,[in] BSTR strUserName,[in] BSTR strPass,[in] short intAgentIdentity,[in] IDispatch * intObj,[out,retval] BSTR * retstring6 );
[id(466), helpstring("网页_访问(网址,[访问方式],[提交信息],[提交Cookie],[返回Cookie],[附加协议头],[返回协议头],[禁止重定向],[代理地址])[字符串]网页源码")] HRESULT WebPost([in] BSTR Url,[in] short AccessType,[in] BSTR SubmitMsg,[in] BSTR SubmitCookie,[in,out] BSTR * ReturnCookie,[in] BSTR Addhead,[in,out] BSTR * ReturnHead,[in] VARIANT_BOOL IsRedirect,[in] BSTR Process,[out,retval] BSTR * retstring0 );
[id(467), helpstring("网页_访问_事件(网址,[访问方式],[提交信息],[提交Cookie],[返回Cookie],[附加协议头],[返回协议头],[返回状态代码],[禁止重定向],[对象继承])[字符串]网页源码")] HRESULT EventWebAcces([in] BSTR Url,[in] VARIANT_BOOL AccessType,[in] BSTR SubmitMsg,[in] BSTR SubCookie,[in,out] BSTR * ReCookie,[in] BSTR Addhead,[in,out] BSTR * ReHead,[in,out] long * Restus,[in] VARIANT_BOOL IsRedrect,[in] IDispatch * ObjWin,[out,retval] BSTR * retstring1 );
[id(468), helpstring("从网络上下载图片(网址,保存路径)[整形数]0 失败,1 成功")] HRESULT DownLoadPic([in] BSTR ImgSrc,[in] BSTR ImgPath,[out,retval] long * retLong );
[id(469), helpstring("转换图片格式为24位BMP格式(要转换的图片名,要保存的BMP图片名)[整形数]0 失败,1 成功")] HRESULT ImageToBmp([in] BSTR pic_name,[in] BSTR bmp_name,[out,retval] long * retLong );
[id(470), helpstring("图片互相转换(要转换的图片名,要保存的图片名,[转换格式 1 BMP;2 JPG;3 PNG;4 GIF],[JPG比率])[整形数]0 失败,1 成功")] HRESULT PictureSwap([in] BSTR pic_name,[in] BSTR bmp_name,[in] long FileFormat,[in] long JpgQuality,[out,retval] long * retLong );
[id(471), helpstring("窗口打字(左上角x坐标,左上角y坐标,文本,颜色,[窗口句柄],[字体名称],[字体大小])[整形数]0 失败,1 成功")] HRESULT ShowText([in] VARIANT X,[in] VARIANT y,[in] BSTR SetText,[in] BSTR SetColor,[in] long hWnd,[in] BSTR fontName,[in] long fontSize,[out,retval] long * retLong );
[id(472), helpstring("窗口打字2(左上角x坐标,左上角y坐标,右下角x坐标,右下角y坐标,文本,颜色,[窗口句柄])[整形数]0 失败,成功返回的是正文的高度（逻辑单位）")] HRESULT ShowTextEx([in] VARIANT x1,[in] VARIANT y1,[in] VARIANT x2,[in] VARIANT y2,[in] BSTR SetText,[in] BSTR SetColor,[in] long hWnd,[out,retval] long * retLong );
[id(473), helpstring("获取是前台鼠标特征()[字符串]")] HRESULT GetCursorShape([out,retval] BSTR * retstring );
[id(474), helpstring("获取鼠标位置(x,y)[整形数]0 失败, 1 成功")] HRESULT GetCursorPos([in,out] VARIANT * X,[in,out] VARIANT * y,[out,retval] long * retLong );
[id(475), helpstring("按下指定的虚拟键码(虚拟按键码,[指定的窗口句柄])[整形数] 0 失败 1 成功")] HRESULT KeyPress([in] long KeyCode,[in] long SetHwnd,[out,retval] long * retLong );
[id(476), helpstring("按下指定的虚拟键码(字符串描述的键码.大小写无所谓,[指定的窗口句柄])[整形数] 0 失败 1 成功")] HRESULT KeyPressChar([in] BSTR StrKey,[in] long SetHwnd,[out,retval] long * retLong );
[id(477), helpstring("根据指定的字符串序列，依次按顺序按下其中的字符(字符串序列,延时,[指定的窗口句柄])[整形数] 0 失败 1 成功")] HRESULT KeyPressStr([in] BSTR StrKey,[in] long Delays,[in] long SetHwnd,[out,retval] long * retLong );
[id(478), helpstring("按住指定的虚拟键码(虚拟按键码,[指定的窗口句柄])[整形数] 0 失败 1 成功")] HRESULT KeyDown([in] long KeyCode,[in] long SetHwnd,[out,retval] long * retLong );
[id(479), helpstring("按住指定的虚拟键码(字符串描述的键码.大小写无所谓,[指定的窗口句柄])[整形数] 0 失败 1 成功")] HRESULT KeyDownChar([in] BSTR StrKey,[in] long SetHwnd,[out,retval] long * retLong );
[id(480), helpstring("弹起来指定的虚拟键码(虚拟按键码,[指定的窗口句柄])[整形数] 0 失败 1 成功")] HRESULT KeyUp([in] long KeyCode,[in] long SetHwnd,[out,retval] long * retLong );
[id(481), helpstring("弹起来指定的虚拟键码(字符串描述的键码.大小写无所谓,[指定的窗口句柄])[整形数] 0失败 1成功")] HRESULT KeyUpChar([in] BSTR StrKey,[in] long SetHwnd,[out,retval] long * retLong );
[id(482), helpstring("鼠标点击(模式,x坐标,y坐标,[指定的窗口句柄])[整形数] 0失败 1成功")] HRESULT MoveClick([in] short Mos,[in] long X,[in] long y,[in] long SetHwnd,[out,retval] long * retLong );
[id(483), helpstring("把鼠标移动到目的点(x,y,[指定的窗口句柄])[整形数]0失败,1成功")] HRESULT MoveTo([in] long X,[in] long y,[in] long SetHwnd,[out,retval] long * retLong );
[id(484), helpstring("鼠标相对于上次的位置移动(rx,ry)[整形数]0失败,1成功")] HRESULT MoveR([in] long X,[in] long y,[out,retval] long * retLong );
[id(485), helpstring("按下鼠标左键([指定的窗口句柄])[整形数]0失败,1成功")] HRESULT LeftClick([in] long SetHwnd,[out,retval] long * retLong );
[id(486), helpstring("双击鼠标左键([指定的窗口句柄])[整形数]0失败,1成功")] HRESULT LeftDoubleClick([in] long SetHwnd,[out,retval] long * retLong );
[id(487), helpstring("按住鼠标左键([指定的窗口句柄])[整形数]0失败,1成功")] HRESULT LeftDown([in] long SetHwnd,[out,retval] long * retLong );
[id(488), helpstring("弹起鼠标左键([指定的窗口句柄])[整形数]0失败,1成功")] HRESULT LeftUp([in] long SetHwnd,[out,retval] long * retLong );
[id(489), helpstring("按下鼠标右键([指定的窗口句柄])[整形数]0失败,1成功")] HRESULT RightClick([in] long SetHwnd,[out,retval] long * retLong );
[id(490), helpstring("双击鼠标右键([指定的窗口句柄])[整形数]0失败,1成功")] HRESULT RightDoubleClick([in] long SetHwnd,[out,retval] long * retLong );
[id(491), helpstring("按住鼠标右键([指定的窗口句柄])[整形数]0失败,1成功")] HRESULT RightDown([in] long SetHwnd,[out,retval] long * retLong );
[id(492), helpstring("弹起鼠标右键([指定的窗口句柄])[整形数]0失败,1成功")] HRESULT RightUp([in] long SetHwnd,[out,retval] long * retLong );
[id(493), helpstring("按下鼠标中键([指定的窗口句柄])[整形数]0失败,1成功")] HRESULT MiddleClick([in] long SetHwnd,[out,retval] long * retLong );
[id(494), helpstring("滚轮向下滚([滚动次数])[整形数]0失败,1成功")] HRESULT WheelDown([in] long nMove,[out,retval] long * retLong );
[id(495), helpstring("滚轮向上滚([滚动次数])[整形数]0失败,1成功")] HRESULT WheelUp([in] long nMove,[out,retval] long * retLong );
[id(496), helpstring("获取指定的按键状态.'前台信息,不是后台'(按键码)[整形数]0 弹起 ,1 按下")] HRESULT GetKeyState([in] long Key,[out,retval] long * retLong );
[id(497), helpstring("禁止外部输入到指定窗口([取值])[整形数]0失败,1成功")] HRESULT LockInput([in] short locks,[out,retval] long * retLong );
[id(498), helpstring("设置前台鼠标在屏幕上的活动范围(左上X坐标, 左上Y坐标,右下X坐标,右下Y坐标)[整形数]0失败,1成功")] HRESULT LockMouseRect([in] long x1,[in] long y1,[in] long x2,[in] long y2,[out,retval] long * retLong );
[id(499), helpstring("设置鼠标延时(延时)")] HRESULT SetMouseDelay([in] long Dt );
[id(500), helpstring("设置按键延时(延时)")] HRESULT SetKeypadDelay([in] long Dt );
[id(501), helpstring("抓取指定区域的图像保存为bmp格式的位图(左上X坐标,左上Y坐标,右下X坐标,右下Y坐标,保存的文件名)[整形数] 0 失败,1 成功")] HRESULT Capture([in] long x1,[in] long y1,[in] long x2,[in] long y2,[in] BSTR PathFile,[out,retval] long * retLong );
[id(502), helpstring("抓取指定区域的图像保存格式为Gif(左上X坐标,左上Y坐标,右下X坐标,右下Y坐标,保存的文件名)[整形数] 0 失败,1 成功")] HRESULT CaptureGif([in] long x1,[in] long y1,[in] long x2,[in] long y2,[in] BSTR PathFile,[out,retval] long * retLong );
[id(503), helpstring("抓取指定区域的图像保存为JPG压缩格式(左上X坐标,左上Y坐标,右下X坐标,右下Y坐标,保存的文件名,[jpg压缩比率])[整形数] 0 失败,1 成功")] HRESULT CaptureJpg([in] long x1,[in] long y1,[in] long x2,[in] long y2,[in] BSTR PathFile,[in] long JpgQuality,[out,retval] long * retLong );
[id(504), helpstring("抓取指定区域的图像保存格式为Png(左上X坐标,左上Y坐标,右下X坐标,右下Y坐标,保存的文件名)[整形数] 0 失败,1 成功")] HRESULT CapturePng([in] long x1,[in] long y1,[in] long x2,[in] long y2,[in] BSTR PathFile,[out,retval] long * retLong );
[id(505), helpstring("比较指定坐标点(x,y)的颜色(x,y,颜色串,相似度)[整形数] 0 匹配 1 不匹配")] HRESULT CmpColor([in] long X,[in] long y,[in] BSTR Color,[in] double Sim,[out,retval] long * retLong );
[id(506), helpstring("获取指定点的颜色(X坐标,Y坐标)[字符串]RGB格式")] HRESULT GetColor([in] long X,[in] long y,[out,retval] BSTR * retstring );
[id(507), helpstring("把16进制颜色值转换分解到10进制R,G,B分量中(16进制颜色值 ,R<10进制> ,G<10进制>,B<10进制>)[整形数]0 失败,1 成功")] HRESULT ColorToRGB([in] VARIANT Color,[in,out] VARIANT * r,[in,out] VARIANT * G,[in,out] VARIANT * B,[in] VARIANT flags,[out,retval] long * retLong );
[id(508), helpstring("获取指定图片的尺寸(文件名,[方式])[字符串]")] HRESULT GetPicSize([in] BSTR PathFile,[in] short n,[out,retval] BSTR * retstring );
[id(509), helpstring("获取指定区域的图像,用二进制数据的方式返回(左上X坐标,左上Y坐标,右下X坐标,右下Y坐标)[字节集]")] HRESULT GetScreenData([in] long x1,[in] long y1,[in] long x2,[in] long y2,[out,retval] SAFEARRAY * * _arg5 );
[id(510), helpstring("把BGR的颜色格式转换为RGB(BGR格式的颜色字符串)[字符串]")] HRESULT BGR2RGB([in] BSTR Color,[out,retval] BSTR * retstring );
[id(511), helpstring("把RGB的颜色格式转换为BGR(RGB格式的颜色字符串)[字符串]")] HRESULT RGB2BGR([in] BSTR Color,[out,retval] BSTR * retstring );
[id(512), helpstring("把10进制R,G,B分量合并到16进制颜色值中(R,G,B)[字符串] 16进制颜色值")] HRESULT GetRGB([in] short r,[in] short G,[in] short B,[out,retval] BSTR * retstring );
[id(513), helpstring("打开网页(网页地址)[整形数]")] HRESULT OpenUrls([in] BSTR WebAddress,[out,retval] long * retLong );
[id(514), helpstring("打开QQ聊天对话框(QQ号码)[整形数]")] HRESULT OpenChat([in] BSTR QQNumber,[out,retval] long * retLong );
[id(515), helpstring("获取外网IP()[字符串]")] HRESULT GetNetworkIP([out,retval] BSTR * retstring );
[id(516), helpstring("获取本机所有IP()[字符串]失败返回空,成功返回所有IP")] HRESULT GetMachineIP([out,retval] BSTR * retstring );
[id(517), helpstring("获取所有连接名()[字符串]")] HRESULT GetAllConnection([out,retval] BSTR * retstring );
[id(518), helpstring("获取所有网络连接名()[字符串]")] HRESULT EnumConnectName([out,retval] BSTR * retstring );
[id(519), helpstring("连接宽带(连接名,帐号,密码,[域名],[电话],[回调])")] HRESULT AddConnection([in] BSTR strNewEntryName,[in] BSTR strNewUsername,[in] BSTR strNewPassword,[in] BSTR strNewDomain,[in] BSTR strNewPhoneNumber,[in] BSTR strNewCallbackNumber,[out,retval] long * retLong );
[id(520), helpstring("列出所有活动RAS连接()[整形数]连接句柄")] HRESULT GetConnections([out,retval] long * retLong );
[id(521), helpstring("断开宽带()")] HRESULT HangUpAll([out,retval] VARIANT_BOOL * _arg1 );
[id(522), helpstring("判断是否连上的网络()[布尔型]连接:True 断开:False")] HRESULT IsConnected([out,retval] VARIANT_BOOL * _arg1 );
[id(523), helpstring("创建数据库(数据库文件路径,[密码])[整形数]0 失败,1 成功")] HRESULT DB_Create([in] VARIANT strDBPath,[in] VARIANT Pass,[out,retval] short * _arg3 );
[id(524), helpstring("创建数据表(欲创建的表名字,欲添加的字段名字和类型,[数据库文件路径],[密码])[整形数]0 失败,1 成功")] HRESULT DB_CreateTable([in] BSTR strTableName,[in] VARIANT strColumnName,[in] VARIANT strDBPath,[in] VARIANT Pass,[out,retval] short * _arg5 );
[id(525), helpstring("添加字段(字段名字,字段类型,[数据表名])")] HRESULT DB_AddColumn([in] BSTR strColumnName,[in] BSTR strColumnType,[in] BSTR strTableName );
[id(526), helpstring("打开数据库(数据库文件路径,数据表名,[密码])[整形数]0 失败,1 成功")] HRESULT DB_Open([in] VARIANT DBPath,[in] VARIANT Table,[in] VARIANT Pass,[out,retval] short * _arg4 );
[id(527), helpstring("向数据表添加一条记录(字段名,字段值)")] HRESULT DB_Write([in] VARIANT Field,[in] VARIANT CValue,[out,retval] short * _arg3 );
[id(528), helpstring("读取数据表一条记录(字段名字,取值)[得到的记录值]")] HRESULT DB_Read([in] VARIANT Title,[in] VARIANT n,[out,retval] VARIANT * _arg3 );
[id(529), helpstring("模糊查询数据表(字段名字,关键字,欲得到的字段名字)[记录集,以'|'分开]")] HRESULT DB_Query([in] VARIANT Field,[in] VARIANT KeyWord,[in] VARIANT Answer,[out,retval] BSTR * retstring );
[id(530), helpstring("查询数据表内相同的记录数量(字段名,字段值)[整型数]数量")] HRESULT DB_GetRecord([in] VARIANT Column,[in] VARIANT Text,[out,retval] long * retLong );
[id(531), helpstring("获取当前打开的表的所有字段名()[字符串]")] HRESULT DB_GetFields([out,retval] BSTR * retstring );
[id(532), helpstring("执行SQL语句(sql)[整形数]0 失败,1 成功")] HRESULT DB_Execute([in] VARIANT Sql,[out,retval] long * retLong );
[id(533), helpstring("修改数据(原值,新值)")] HRESULT DB_Modify([in] VARIANT CValue1,[in] VARIANT Cvalue2 );
[id(534), helpstring("插入数据(字段名,字段值)")] HRESULT DB_Insert([in] VARIANT CValue1,[in] VARIANT Cvalue2 );
[id(535), helpstring("删除数据(删除条件)")] HRESULT DB_Delete([in] VARIANT CValue );
[id(536), helpstring("判断指定的值是否存在(字段名,字段值)[整形数]0 不存在,1 存在")] HRESULT DB_IsValue([in] VARIANT Column,[in] VARIANT CValue,[out,retval] long * retLong );
[id(537), helpstring("关闭数据库()")] HRESULT DB_Close( );
[id(538), helpstring("DAO创建数据库(数据库路径)[整形数]0 成功,非0 失败并返回错误代码")] HRESULT DAO_CreateData([in] VARIANT DataPath,[out,retval] long * retLong );
[id(539), helpstring("DAO获取数据库所有表名(数据库路径,[密码])[字符串]")] HRESULT DAO_GetTables([in] VARIANT DataPath,[in] VARIANT pwd,[out,retval] BSTR * retstring );
[id(540), helpstring("点击带有CheckBox的Treeview(指定的窗口句柄,节点名称,[True 精确匹配 False 模糊匹配])[整数型]0,失败 1,成功")] HRESULT Tree_ClickItem([in] long AHandle,[in] BSTR lpszPath,[in] VARIANT_BOOL Isfuzzy,[out,retval] long * retLong );
[id(541), helpstring("自动定位到指定节点(指定的窗口句柄,节点名称,[True 精确匹配 False 模糊匹配])[整数型]0,失败 1,成功")] HRESULT Tree_ExpandItem([in] long AHandle,[in] BSTR lpszPath,[in] VARIANT_BOOL Isfuzzy,[out,retval] long * retLong );
[id(542), helpstring("获取Treeview选中状态(指定的窗口句柄,节点名称,[True 精确匹配 False 模糊匹配])[整数型]0,没有选中 1,选中")] HRESULT Tree_GetItemCheck([in] long AHandle,[in] BSTR ItemName,[in] VARIANT_BOOL Isfuzzy,[out,retval] long * retLong );
[id(543), helpstring("")] HRESULT XML_CreateAttr([in] BSTR strAttr,[in] BSTR strValue,[out,retval] IDispatch * * _arg3 );
[id(544), helpstring("")] HRESULT XML_Create([in] BSTR XmlPath,[in] BSTR strRootName,[out,retval] IDispatch * * _arg3 );
[id(545), helpstring("")] HRESULT XML_CreateNode([in] BSTR strNode,[in] BSTR nodename,[out,retval] IDispatch * * _arg3 );
[id(546), helpstring("")] HRESULT XML_CreateElement([in] BSTR strElementName,[out,retval] IDispatch * * _arg2 );
[id(547), helpstring("")] HRESULT XML_GetElementList([in] BSTR strElement,[out,retval] IDispatch * * _arg2 );
[id(548), helpstring("")] HRESULT XML_GetAttrValue([in] BSTR NodePath,[out,retval] BSTR * retstring );
[id(549), helpstring("导入XML文件(xml文件路径)[布尔型]False,失败 True,成功")] HRESULT XML_Load([in] BSTR XmlPath,[out,retval] VARIANT_BOOL * _arg2 );
[id(550), helpstring("")] HRESULT XML_LoadXML([in] BSTR xmlSource,[out,retval] VARIANT_BOOL * _arg2 );
[id(551), helpstring("获取节点对象(节点全路径)[对象]")] HRESULT XML_GetNodeObject([in] BSTR szNodePath,[out,retval] IDispatch * * _arg2 );
[id(552), helpstring("获取节点集(节点全路径)[对象]")] HRESULT XML_GetChildNodes([in] BSTR szNodePath,[out,retval] IDispatch * * _arg2 );
[id(553), helpstring("获取节点值(节点全路径)[字符串]成功返回值,失败返回空")] HRESULT XML_GetNodeValue([in] BSTR szNodePath,[in] long nIndex,[out,retval] BSTR * retstring );
[id(554), helpstring("获取节点名称(节点全路径)[字符串]成功返回名称,失败返回空")] HRESULT XML_GetNodeName([in] BSTR szNodePath,[in] long nIndex,[out,retval] BSTR * retstring );
[id(555), helpstring("枚举子节点名称(节点全路径)[字符串]成功返回所有名称.以'|'隔开,失败返回空")] HRESULT XML_EnumChildName([in] BSTR szNodePath,[out,retval] BSTR * retstring );
[id(556), helpstring("枚举子节点值(节点全路径)[字符串]成功返回所有节点值.以'|'隔开,失败返回空")] HRESULT XML_EnumChildValue([in] BSTR szNodePath,[out,retval] BSTR * retstring );
[id(557), helpstring("枚举子节点属性名称和值(节点全路径)[字符串]成功返回所有名称和值.以'|'隔开,失败返回空")] HRESULT XML_EnumAttributes([in] BSTR szNodePath,[out,retval] BSTR * retstring );
[id(558), helpstring("获取节点属性数量(节点全路径)[整形数]失败返回0,成功返回取到的数量")] HRESULT XML_GetAttrCount([in] BSTR szNodePath,[out,retval] long * retLong );
[id(559), helpstring("把所做的修改保存到xml文件([xml文件路径])[整形数]失败返回0,成功返回1")] HRESULT XML_Save([in] BSTR szXmlPath,[out,retval] long * retLong );
[id(560), helpstring("")] HRESULT Get_Plugin_Description([in,out] BSTR * ItemName,[out,retval] BSTR * retstring );
[id(561), helpstring("")] HRESULT Get_Plugin_Interpret_Template([in,out] BSTR * ItemName,[out,retval] BSTR * retstring );
